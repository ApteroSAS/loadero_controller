/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {Group} from '../model/Group';
import {GroupIDCopyBody} from '../model/GroupIDCopyBody';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {ValidationResponse} from '../model/ValidationResponse';

/**
* Group service.
* @module api/GroupApi
* @version v0.32.1
*/
export class GroupApi {

    /**
    * Constructs a new GroupApi. 
    * @alias module:api/GroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback moduleapi/GroupApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new group
     * This endpoint creates new group with given data.
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {module:model/Group} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/GroupApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createGroup(projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling createGroup");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling createGroup");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback moduleapi/GroupApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing group
     * This endpoint deletes group. Test and group must be previously created
     * @param {Number} groupID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {module:api/GroupApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroup(groupID, projectID, testID, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling deleteGroup");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling deleteGroup");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling deleteGroup");
      }

      let pathParams = {
        'groupID': groupID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the duplicateGroup operation.
     * @callback moduleapi/GroupApi~duplicateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate existing group
     * This endpoint duplicates given group. If no copy name is provided an \&quot;Copy of\&quot; prefix will be applied to the group name. Test and group must be previously created.
     * @param {Number} groupID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupIDCopyBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/GroupApi~duplicateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    duplicateGroup(groupID, projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling duplicateGroup");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling duplicateGroup");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling duplicateGroup");
      }

      let pathParams = {
        'groupID': groupID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/copy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAllGroups operation.
     * @callback moduleapi/GroupApi~readAllGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all existing groups for test
     * This endpoint retrieves all group info. Test must be previously created
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.describe 
     * @param {String} opts.filterName 
     * @param {String} opts.filterCountFrom 
     * @param {String} opts.filterCountTo 
     * @param {module:api/GroupApi~readAllGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllGroups(projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readAllGroups");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readAllGroups");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'describe': opts['describe'],'filter_name': opts['filterName'],'filter_count_from': opts['filterCountFrom'],'filter_count_to': opts['filterCountTo']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readGroup operation.
     * @callback moduleapi/GroupApi~readGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read group info
     * This endpoint retrieves group info. Test and group must be previously created
     * @param {Number} groupID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {module:api/GroupApi~readGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readGroup(groupID, projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling readGroup");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readGroup");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readGroup");
      }

      let pathParams = {
        'groupID': groupID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback moduleapi/GroupApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing group
     * This endpoint updates group with given properties. Test and group must be previously created
     * @param {Number} groupID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {module:model/Group} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/GroupApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateGroup(groupID, projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling updateGroup");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling updateGroup");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling updateGroup");
      }

      let pathParams = {
        'groupID': groupID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}