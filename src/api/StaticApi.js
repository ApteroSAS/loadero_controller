/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BaseClassificator} from '../model/BaseClassificator';
import {ErrorResponse} from '../model/ErrorResponse';

/**
* Static service.
* @module api/StaticApi
* @version v0.32.1
*/
export class StaticApi {

    /**
    * Constructs a new StaticApi. 
    * @alias module:api/StaticApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the readAllStaticTypes operation.
     * @callback moduleapi/StaticApi~readAllStaticTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read all static type info
     * This endpoint retrieves all static type info
     * @param {module:api/StaticApi~readAllStaticTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllStaticTypes(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/statics/types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAllStatics operation.
     * @callback moduleapi/StaticApi~readAllStaticsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': [BaseClassificator]}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read all static resource info
     * This endpoint retrieves all static resource info
     * @param {module:api/StaticApi~readAllStaticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllStatics(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': [BaseClassificator]};

      return this.apiClient.callApi(
        '/statics/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readMetricPath operation.
     * @callback moduleapi/StaticApi~readMetricPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read all metric path info
     * This endpoint retrieves all available metric paths
     * @param {module:api/StaticApi~readMetricPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readMetricPath(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/statics/metric_path/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readStaticResource operation.
     * @callback moduleapi/StaticApi~readStaticResourceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseClassificator>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read all specified static resource info
     * This endpoint retrieves all specified static resource info
     * @param {String} resource 
     * @param {module:api/StaticApi~readStaticResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readStaticResource(resource, callback) {
      
      let postBody = null;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling readStaticResource");
      }

      let pathParams = {
        'resource': resource
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BaseClassificator];

      return this.apiClient.callApi(
        '/statics/{resource}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}