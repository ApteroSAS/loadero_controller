/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {Test} from '../model/Test';
import {TestIDCopyBody} from '../model/TestIDCopyBody';
import {ValidationResponse} from '../model/ValidationResponse';

/**
* Test service.
* @module api/TestApi
* @version v0.32.1
*/
export class TestApi {

    /**
    * Constructs a new TestApi. 
    * @alias module:api/TestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createTest operation.
     * @callback moduleapi/TestApi~createTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new test
     * This endpoint creates new test with given data.
     * @param {String} name 
     * @param {Number} startInterval 
     * @param {Number} participantTimeout 
     * @param {String} mode 
     * @param {String} incrementStrategy 
     * @param {String} script 
     * @param {Number} projectID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {Number} opts.id readonly: true
     * @param {Date} opts.created readonly: true
     * @param {Date} opts.updated readonly: true
     * @param {Number} opts.projectId readonly: true
     * @param {Number} opts.scriptFileId readonly: true
     * @param {Boolean} opts.deleted readonly: true
     * @param {Number} opts.groupCount readonly: true
     * @param {Number} opts.participantCount readonly: true
     * @param {module:api/TestApi~createTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, projectID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createTest");
      }
      // verify the required parameter 'startInterval' is set
      if (startInterval === undefined || startInterval === null) {
        throw new Error("Missing the required parameter 'startInterval' when calling createTest");
      }
      // verify the required parameter 'participantTimeout' is set
      if (participantTimeout === undefined || participantTimeout === null) {
        throw new Error("Missing the required parameter 'participantTimeout' when calling createTest");
      }
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling createTest");
      }
      // verify the required parameter 'incrementStrategy' is set
      if (incrementStrategy === undefined || incrementStrategy === null) {
        throw new Error("Missing the required parameter 'incrementStrategy' when calling createTest");
      }
      // verify the required parameter 'script' is set
      if (script === undefined || script === null) {
        throw new Error("Missing the required parameter 'script' when calling createTest");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling createTest");
      }

      let pathParams = {
        'projectID': projectID
      };
      let queryParams = {
        'describe': opts['describe'],'id': opts['id'],'created': opts['created'],'updated': opts['updated'],'project_id': opts['projectId'],'name': name,'script_file_id': opts['scriptFileId'],'start_interval': startInterval,'participant_timeout': participantTimeout,'mode': mode,'increment_strategy': incrementStrategy,'deleted': opts['deleted'],'group_count': opts['groupCount'],'participant_count': opts['participantCount'],'script': script
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Test;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTest operation.
     * @callback moduleapi/TestApi~deleteTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing test
     * This endpoint deletes test. Project and test must be previously created
     * @param {Number} testID 
     * @param {Number} projectID 
     * @param {module:api/TestApi~deleteTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTest(testID, projectID, callback) {
      
      let postBody = null;
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling deleteTest");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling deleteTest");
      }

      let pathParams = {
        'testID': testID,'projectID': projectID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the duplicateTest operation.
     * @callback moduleapi/TestApi~duplicateTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate existing test
     * This endpoint duplicates given test. If no copy name is provided an \&quot;Copy of\&quot; prefix will be applied to the test name. Project and test must be previously created.
     * @param {Number} testID 
     * @param {Number} projectID 
     * @param {Object} opts Optional parameters
     * @param {module:model/TestIDCopyBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/TestApi~duplicateTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    duplicateTest(testID, projectID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling duplicateTest");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling duplicateTest");
      }

      let pathParams = {
        'testID': testID,'projectID': projectID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Test;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/copy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAllTests operation.
     * @callback moduleapi/TestApi~readAllTestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all existing tests for project
     * This endpoint retrieves all test info. Project must be previously created
     * @param {Number} projectID 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.describe 
     * @param {String} opts.filterName 
     * @param {String} opts.filterTestMode 
     * @param {String} opts.filterIncrementStrategy 
     * @param {String} opts.filterStartIntervalFrom 
     * @param {String} opts.filterStartIntervalTo 
     * @param {String} opts.filterParticipantTimeoutFrom 
     * @param {String} opts.filterParticipantTimeoutTo 
     * @param {module:api/TestApi~readAllTestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllTests(projectID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readAllTests");
      }

      let pathParams = {
        'projectID': projectID
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'describe': opts['describe'],'filter_name': opts['filterName'],'filter_test_mode': opts['filterTestMode'],'filter_increment_strategy': opts['filterIncrementStrategy'],'filter_start_interval_from': opts['filterStartIntervalFrom'],'filter_start_interval_to': opts['filterStartIntervalTo'],'filter_participant_timeout_from': opts['filterParticipantTimeoutFrom'],'filter_participant_timeout_to': opts['filterParticipantTimeoutTo']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readTest operation.
     * @callback moduleapi/TestApi~readTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read test info
     * This endpoint retrieves test info. Project and test must be previously created
     * @param {Number} testID 
     * @param {Number} projectID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {module:api/TestApi~readTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readTest(testID, projectID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readTest");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readTest");
      }

      let pathParams = {
        'testID': testID,'projectID': projectID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Test;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTest operation.
     * @callback moduleapi/TestApi~updateTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing test
     * This endpoint updates test with given properties. Project and test must be previously created
     * @param {String} name 
     * @param {Number} startInterval 
     * @param {Number} participantTimeout 
     * @param {String} mode 
     * @param {String} incrementStrategy 
     * @param {String} script 
     * @param {Number} testID 
     * @param {Number} projectID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {Number} opts.id readonly: true
     * @param {Date} opts.created readonly: true
     * @param {Date} opts.updated readonly: true
     * @param {Number} opts.projectId readonly: true
     * @param {Number} opts.scriptFileId readonly: true
     * @param {Boolean} opts.deleted readonly: true
     * @param {Number} opts.groupCount readonly: true
     * @param {Number} opts.participantCount readonly: true
     * @param {module:api/TestApi~updateTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, testID, projectID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateTest");
      }
      // verify the required parameter 'startInterval' is set
      if (startInterval === undefined || startInterval === null) {
        throw new Error("Missing the required parameter 'startInterval' when calling updateTest");
      }
      // verify the required parameter 'participantTimeout' is set
      if (participantTimeout === undefined || participantTimeout === null) {
        throw new Error("Missing the required parameter 'participantTimeout' when calling updateTest");
      }
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling updateTest");
      }
      // verify the required parameter 'incrementStrategy' is set
      if (incrementStrategy === undefined || incrementStrategy === null) {
        throw new Error("Missing the required parameter 'incrementStrategy' when calling updateTest");
      }
      // verify the required parameter 'script' is set
      if (script === undefined || script === null) {
        throw new Error("Missing the required parameter 'script' when calling updateTest");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling updateTest");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling updateTest");
      }

      let pathParams = {
        'testID': testID,'projectID': projectID
      };
      let queryParams = {
        'describe': opts['describe'],'id': opts['id'],'created': opts['created'],'updated': opts['updated'],'project_id': opts['projectId'],'name': name,'script_file_id': opts['scriptFileId'],'start_interval': startInterval,'participant_timeout': participantTimeout,'mode': mode,'increment_strategy': incrementStrategy,'deleted': opts['deleted'],'group_count': opts['groupCount'],'participant_count': opts['participantCount'],'script': script
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Test;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}