/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {ParticipantBody} from '../model/ParticipantBody';
import {ParticipantIDCopyBody} from '../model/ParticipantIDCopyBody';
import {ValidationResponse} from '../model/ValidationResponse';

/**
* Participants service.
* @module api/ParticipantsApi
* @version v0.32.1
*/
export class ParticipantsApi {

    /**
    * Constructs a new ParticipantsApi. 
    * @alias module:api/ParticipantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createParticipant operation.
     * @callback moduleapi/ParticipantsApi~createParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new participant.
     * This endpoint creates new participant with given properties.
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParticipantBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/ParticipantsApi~createParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createParticipant(projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling createParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling createParticipant");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/participants/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteParticipant operation.
     * @callback moduleapi/ParticipantsApi~deleteParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing participant.
     * This endpoint deletes participant.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {module:api/ParticipantsApi~deleteParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteParticipant(participantID, projectID, testID, callback) {
      
      let postBody = null;
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling deleteParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling deleteParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling deleteParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/participants/{participantID}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the duplicateParticipant operation.
     * @callback moduleapi/ParticipantsApi~duplicateParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate existing participant
     * This endpoint duplicates given participant. If no copy name is provided an \&quot;Copy of\&quot; prefix will be applied to the participant name. Group and participant must be previously created.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParticipantIDCopyBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/ParticipantsApi~duplicateParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    duplicateParticipant(participantID, projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling duplicateParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling duplicateParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling duplicateParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/participants/{participantID}/copy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAllParticipants operation.
     * @callback moduleapi/ParticipantsApi~readAllParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all existing participants for test.
     * This endpoint retrieves all participant info.
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.describe 
     * @param {String} opts.filterBrowser 
     * @param {String} opts.filterNetwork 
     * @param {String} opts.filterLocation 
     * @param {String} opts.filterMediaType 
     * @param {String} opts.filterVideoFeed 
     * @param {String} opts.filterAudioFeed 
     * @param {String} opts.filterName 
     * @param {String} opts.filterCountFrom 
     * @param {String} opts.filterCountTo 
     * @param {String} opts.filterComputeUnit 
     * @param {String} opts.filterHasGroup 
     * @param {String} opts.filterRecordAudio 
     * @param {module:api/ParticipantsApi~readAllParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllParticipants(projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readAllParticipants");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readAllParticipants");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'describe': opts['describe'],'filter_browser': opts['filterBrowser'],'filter_network': opts['filterNetwork'],'filter_location': opts['filterLocation'],'filter_media_type': opts['filterMediaType'],'filter_video_feed': opts['filterVideoFeed'],'filter_audio_feed': opts['filterAudioFeed'],'filter_name': opts['filterName'],'filter_count_from': opts['filterCountFrom'],'filter_count_to': opts['filterCountTo'],'filter_compute_unit': opts['filterComputeUnit'],'filter_has_group': opts['filterHasGroup'],'filter_record_audio': opts['filterRecordAudio']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/participants/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readParticipant operation.
     * @callback moduleapi/ParticipantsApi~readParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get existing participant.
     * This endpoint retrieves participant info.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {module:api/ParticipantsApi~readParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readParticipant(participantID, projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling readParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/participants/{participantID}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateParticipant operation.
     * @callback moduleapi/ParticipantsApi~updateParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing participant.
     * This endpoint updates participant with given properties.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ParticipantBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/ParticipantsApi~updateParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateParticipant(participantID, projectID, testID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling updateParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling updateParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling updateParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/participants/{participantID}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}