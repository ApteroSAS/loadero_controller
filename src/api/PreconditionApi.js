/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AssertPrecondition} from '../model/AssertPrecondition';
import {ErrorResponse} from '../model/ErrorResponse';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {ValidationResponse} from '../model/ValidationResponse';

/**
* Precondition service.
* @module api/PreconditionApi
* @version v0.32.1
*/
export class PreconditionApi {

    /**
    * Constructs a new PreconditionApi. 
    * @alias module:api/PreconditionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createPrecondition operation.
     * @callback moduleapi/PreconditionApi~createPreconditionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssertPrecondition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new assert precondition
     * This endpoint creates new assert precondition with given data.
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} assertID 
     * @param {Object} opts Optional parameters
     * @param {module:model/AssertPrecondition} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/PreconditionApi~createPreconditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPrecondition(projectID, testID, assertID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling createPrecondition");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling createPrecondition");
      }
      // verify the required parameter 'assertID' is set
      if (assertID === undefined || assertID === null) {
        throw new Error("Missing the required parameter 'assertID' when calling createPrecondition");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID,'assertID': assertID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssertPrecondition;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePrecondition operation.
     * @callback moduleapi/PreconditionApi~deletePreconditionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing assert precondition
     * This endpoint deletes assert precondition. Assert and precondition must be previously created
     * @param {Number} preconditionID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} assertID 
     * @param {module:api/PreconditionApi~deletePreconditionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePrecondition(preconditionID, projectID, testID, assertID, callback) {
      
      let postBody = null;
      // verify the required parameter 'preconditionID' is set
      if (preconditionID === undefined || preconditionID === null) {
        throw new Error("Missing the required parameter 'preconditionID' when calling deletePrecondition");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling deletePrecondition");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling deletePrecondition");
      }
      // verify the required parameter 'assertID' is set
      if (assertID === undefined || assertID === null) {
        throw new Error("Missing the required parameter 'assertID' when calling deletePrecondition");
      }

      let pathParams = {
        'preconditionID': preconditionID,'projectID': projectID,'testID': testID,'assertID': assertID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/{preconditionID}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAllPreconditions operation.
     * @callback moduleapi/PreconditionApi~readAllPreconditionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all existing assert preconditions for assert
     * This endpoint retrieves all assert precodndition info. Assert must be previously created
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} assertID 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.describe 
     * @param {String} opts.filterProperty 
     * @param {String} opts.filterOperator 
     * @param {String} opts.filterExpected 
     * @param {module:api/PreconditionApi~readAllPreconditionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllPreconditions(projectID, testID, assertID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readAllPreconditions");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readAllPreconditions");
      }
      // verify the required parameter 'assertID' is set
      if (assertID === undefined || assertID === null) {
        throw new Error("Missing the required parameter 'assertID' when calling readAllPreconditions");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID,'assertID': assertID
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'describe': opts['describe'],'filter_property': opts['filterProperty'],'filter_operator': opts['filterOperator'],'filter_expected': opts['filterExpected']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPrecondition operation.
     * @callback moduleapi/PreconditionApi~readPreconditionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssertPrecondition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read assert precondition info
     * This endpoint retrieves assert precondition info. Assert and precondition must be previously created
     * @param {Number} preconditionID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} assertID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {module:api/PreconditionApi~readPreconditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPrecondition(preconditionID, projectID, testID, assertID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'preconditionID' is set
      if (preconditionID === undefined || preconditionID === null) {
        throw new Error("Missing the required parameter 'preconditionID' when calling readPrecondition");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readPrecondition");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readPrecondition");
      }
      // verify the required parameter 'assertID' is set
      if (assertID === undefined || assertID === null) {
        throw new Error("Missing the required parameter 'assertID' when calling readPrecondition");
      }

      let pathParams = {
        'preconditionID': preconditionID,'projectID': projectID,'testID': testID,'assertID': assertID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssertPrecondition;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/{preconditionID}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePrecondition operation.
     * @callback moduleapi/PreconditionApi~updatePreconditionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssertPrecondition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing assert precondition
     * This endpoint updates assert precondition with given properties. Assert and precondition must be previously created
     * @param {Number} preconditionID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} assertID 
     * @param {Object} opts Optional parameters
     * @param {module:model/AssertPrecondition} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/PreconditionApi~updatePreconditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePrecondition(preconditionID, projectID, testID, assertID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'preconditionID' is set
      if (preconditionID === undefined || preconditionID === null) {
        throw new Error("Missing the required parameter 'preconditionID' when calling updatePrecondition");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling updatePrecondition");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling updatePrecondition");
      }
      // verify the required parameter 'assertID' is set
      if (assertID === undefined || assertID === null) {
        throw new Error("Missing the required parameter 'assertID' when calling updatePrecondition");
      }

      let pathParams = {
        'preconditionID': preconditionID,'projectID': projectID,'testID': testID,'assertID': assertID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssertPrecondition;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/{preconditionID}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}