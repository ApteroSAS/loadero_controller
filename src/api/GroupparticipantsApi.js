/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {GroupParticipantBody} from '../model/GroupParticipantBody';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {ValidationResponse} from '../model/ValidationResponse';

/**
* Groupparticipants service.
* @module api/GroupparticipantsApi
* @version v0.32.1
*/
export class GroupparticipantsApi {

    /**
    * Constructs a new GroupparticipantsApi. 
    * @alias module:api/GroupparticipantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createGroupParticipant operation.
     * @callback moduleapi/GroupparticipantsApi~createGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new group participant.
     * This endpoint creates new group participant with given properties.
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} groupID 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupParticipantBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/GroupparticipantsApi~createGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createGroupParticipant(projectID, testID, groupID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling createGroupParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling createGroupParticipant");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling createGroupParticipant");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID,'groupID': groupID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteGroupParticipant operation.
     * @callback moduleapi/GroupparticipantsApi~deleteGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing group participant.
     * This endpoint deletes group participant.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} groupID 
     * @param {module:api/GroupparticipantsApi~deleteGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupParticipant(participantID, projectID, testID, groupID, callback) {
      
      let postBody = null;
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling deleteGroupParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling deleteGroupParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling deleteGroupParticipant");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling deleteGroupParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID,'groupID': groupID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the duplicateGroupParticipant operation.
     * @callback moduleapi/GroupparticipantsApi~duplicateGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate existing group participant.
     * This endpoint duplicates given group participant. If no copy name is provided an \&quot;Copy of\&quot; prefix will be applied to the participant name.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} groupID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {module:api/GroupparticipantsApi~duplicateGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    duplicateGroupParticipant(participantID, projectID, testID, groupID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling duplicateGroupParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling duplicateGroupParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling duplicateGroupParticipant");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling duplicateGroupParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID,'groupID': groupID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/copy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readAllGroupParticipants operation.
     * @callback moduleapi/GroupparticipantsApi~readAllGroupParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all existing group participants for group.
     * This endpoint retrieves all group participant info.
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} groupID 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.describe 
     * @param {String} opts.filterBrowser 
     * @param {String} opts.filterNetwork 
     * @param {String} opts.filterLocation 
     * @param {String} opts.filterMediaType 
     * @param {String} opts.filterVideoFeed 
     * @param {String} opts.filterAudioFeed 
     * @param {String} opts.filterName 
     * @param {String} opts.filterCountFrom 
     * @param {String} opts.filterCountTo 
     * @param {String} opts.filterComputeUnit 
     * @param {String} opts.filterHasGroup 
     * @param {String} opts.filterRecordAudio 
     * @param {module:api/GroupparticipantsApi~readAllGroupParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readAllGroupParticipants(projectID, testID, groupID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readAllGroupParticipants");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readAllGroupParticipants");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling readAllGroupParticipants");
      }

      let pathParams = {
        'projectID': projectID,'testID': testID,'groupID': groupID
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'describe': opts['describe'],'filter_browser': opts['filterBrowser'],'filter_network': opts['filterNetwork'],'filter_location': opts['filterLocation'],'filter_media_type': opts['filterMediaType'],'filter_video_feed': opts['filterVideoFeed'],'filter_audio_feed': opts['filterAudioFeed'],'filter_name': opts['filterName'],'filter_count_from': opts['filterCountFrom'],'filter_count_to': opts['filterCountTo'],'filter_compute_unit': opts['filterComputeUnit'],'filter_has_group': opts['filterHasGroup'],'filter_record_audio': opts['filterRecordAudio']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readGroupParticipant operation.
     * @callback moduleapi/GroupparticipantsApi~readGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get existing group participant.
     * This endpoint retrieves group participant info.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} groupID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.describe 
     * @param {module:api/GroupparticipantsApi~readGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readGroupParticipant(participantID, projectID, testID, groupID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling readGroupParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling readGroupParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling readGroupParticipant");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling readGroupParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID,'groupID': groupID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateGroupParticipant operation.
     * @callback moduleapi/GroupparticipantsApi~updateGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantBody{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing group participant.
     * This endpoint updates group participant with given properties.
     * @param {Number} participantID 
     * @param {Number} projectID 
     * @param {Number} testID 
     * @param {Number} groupID 
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupParticipantBody} opts.body 
     * @param {String} opts.describe 
     * @param {module:api/GroupparticipantsApi~updateGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateGroupParticipant(participantID, projectID, testID, groupID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'participantID' is set
      if (participantID === undefined || participantID === null) {
        throw new Error("Missing the required parameter 'participantID' when calling updateGroupParticipant");
      }
      // verify the required parameter 'projectID' is set
      if (projectID === undefined || projectID === null) {
        throw new Error("Missing the required parameter 'projectID' when calling updateGroupParticipant");
      }
      // verify the required parameter 'testID' is set
      if (testID === undefined || testID === null) {
        throw new Error("Missing the required parameter 'testID' when calling updateGroupParticipant");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling updateGroupParticipant");
      }

      let pathParams = {
        'participantID': participantID,'projectID': projectID,'testID': testID,'groupID': groupID
      };
      let queryParams = {
        'describe': opts['describe']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantBody;

      return this.apiClient.callApi(
        '/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}