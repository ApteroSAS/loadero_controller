/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoaderoController.AssertApi();
  });

  describe('(package)', function() {
    describe('AssertApi', function() {
      describe('createAssert', function() {
        it('should call createAssert successfully', function(done) {
          // TODO: uncomment, update parameter values for createAssert call and complete the assertions
          /*
          var opts = {};

          instance.createAssert(projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.Assert);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAssert', function() {
        it('should call deleteAssert successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAssert call
          /*

          instance.deleteAssert(assertID, projectID, testID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('duplicateAssert', function() {
        it('should call duplicateAssert successfully', function(done) {
          // TODO: uncomment, update parameter values for duplicateAssert call and complete the assertions
          /*
          var opts = {};

          instance.duplicateAssert(assertID, projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.Assert);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readAllAsserts', function() {
        it('should call readAllAsserts successfully', function(done) {
          // TODO: uncomment, update parameter values for readAllAsserts call and complete the assertions
          /*
          var opts = {};

          instance.readAllAsserts(projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.InlineResponse2005);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readAssert', function() {
        it('should call readAssert successfully', function(done) {
          // TODO: uncomment, update parameter values for readAssert call and complete the assertions
          /*
          var opts = {};

          instance.readAssert(assertID, projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.Assert);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAssert', function() {
        it('should call updateAssert successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAssert call and complete the assertions
          /*
          var opts = {};

          instance.updateAssert(assertID, projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.Assert);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
