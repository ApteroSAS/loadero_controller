/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoaderoController.RunApi();
  });

  describe('(package)', function() {
    describe('RunApi', function() {
      describe('createTestRun', function() {
        it('should call createTestRun successfully', function(done) {
          // TODO: uncomment, update parameter values for createTestRun call and complete the assertions
          /*
          var testID = 789;
          var projectID = 789;
          var opts = {};
          opts.describe = "describe_example";

          instance.createTestRun(testID, projectID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.Run);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.executionFinished).to.be.a(Date);
            expect(data.executionFinished).to.be(new Date());
            expect(data.executionStarted).to.be.a(Date);
            expect(data.executionStarted).to.be(new Date());
            expect(data.groupCount).to.be.a('number');
            expect(data.groupCount).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.incrementStrategy).to.be.a('string');
            expect(data.incrementStrategy).to.be("");
            expect(data.launchingAccountId).to.be.a('number');
            expect(data.launchingAccountId).to.be("0");
            expect(data.participantTimeout).to.be.a('number');
            expect(data.participantTimeout).to.be("0");
            expect(data.processingFinished).to.be.a(Date);
            expect(data.processingFinished).to.be(new Date());
            expect(data.processingStarted).to.be.a(Date);
            expect(data.processingStarted).to.be(new Date());
            expect(data.scriptFileId).to.be.a('number');
            expect(data.scriptFileId).to.be("0");
            expect(data.startInterval).to.be.a('number');
            expect(data.startInterval).to.be("0");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.successRate).to.be.a('number');
            expect(data.successRate).to.be(0.0);
            expect(data.testId).to.be.a('number');
            expect(data.testId).to.be("0");
            expect(data.testMode).to.be.a('string');
            expect(data.testMode).to.be("");
            expect(data.testName).to.be.a('string');
            expect(data.testName).to.be("");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readAllTestRuns', function() {
        it('should call readAllTestRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for readAllTestRuns call and complete the assertions
          /*
          var testID = 789;
          var projectID = 789;
          var opts = {};
          opts.limit = 789;
          opts.offset = 789;
          opts.describe = "describe_example";
          opts.filterTestName = "filterTestName_example";
          opts.filterStartedFrom = "filterStartedFrom_example";
          opts.filterStartedTo = "filterStartedTo_example";
          opts.filterFinishedFrom = "filterFinishedFrom_example";
          opts.filterFinishedTo = "filterFinishedTo_example";
          opts.filterExecutionStartedFrom = "filterExecutionStartedFrom_example";
          opts.filterExecutionStartedTo = "filterExecutionStartedTo_example";
          opts.filterExecutionFinishedFrom = "filterExecutionFinishedFrom_example";
          opts.filterExecutionFinishedTo = "filterExecutionFinishedTo_example";
          opts.filterIncrementStrategy = "filterIncrementStrategy_example";
          opts.filterStatus = "filterStatus_example";
          opts.filterTestMode = "filterTestMode_example";
          opts.filterStartIntervalFrom = "filterStartIntervalFrom_example";
          opts.filterStartIntervalTo = "filterStartIntervalTo_example";
          opts.filterParticipantTimeoutFrom = "filterParticipantTimeoutFrom_example";
          opts.filterParticipantTimeoutTo = "filterParticipantTimeoutTo_example";
          opts.filterActive = "filterActive_example";

          instance.readAllTestRuns(testID, projectID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readTestRun', function() {
        it('should call readTestRun successfully', function(done) {
          // TODO: uncomment, update parameter values for readTestRun call and complete the assertions
          /*
          var runID = 789;
          var testID = 789;
          var projectID = 789;
          var opts = {};
          opts.describe = "describe_example";

          instance.readTestRun(runID, testID, projectID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.RunBody);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.executionFinished).to.be.a(Date);
            expect(data.executionFinished).to.be(new Date());
            expect(data.executionStarted).to.be.a(Date);
            expect(data.executionStarted).to.be(new Date());
            expect(data.groupCount).to.be.a('number');
            expect(data.groupCount).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.incrementStrategy).to.be.a('string');
            expect(data.incrementStrategy).to.be("");
            expect(data.launchingAccountId).to.be.a('number');
            expect(data.launchingAccountId).to.be("0");
            expect(data.participantCount).to.be.a('number');
            expect(data.participantCount).to.be("0");
            expect(data.participantTimeout).to.be.a('number');
            expect(data.participantTimeout).to.be("0");
            expect(data.processingFinished).to.be.a(Date);
            expect(data.processingFinished).to.be(new Date());
            expect(data.processingStarted).to.be.a(Date);
            expect(data.processingStarted).to.be(new Date());
            expect(data.scriptFileId).to.be.a('number');
            expect(data.scriptFileId).to.be("0");
            expect(data.startInterval).to.be.a('number');
            expect(data.startInterval).to.be("0");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.successRate).to.be.a('number');
            expect(data.successRate).to.be(0.0);
            expect(data.testId).to.be.a('number');
            expect(data.testId).to.be("0");
            expect(data.testMode).to.be.a('string');
            expect(data.testMode).to.be("");
            expect(data.testName).to.be.a('string');
            expect(data.testName).to.be("");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopTestRun', function() {
        it('should call stopTestRun successfully', function(done) {
          // TODO: uncomment, update parameter values for stopTestRun call
          /*
          var runID = 789;
          var testID = 789;
          var projectID = 789;

          instance.stopTestRun(runID, testID, projectID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
