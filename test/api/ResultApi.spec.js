/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoaderoController.ResultApi();
  });

  describe('(package)', function() {
    describe('ResultApi', function() {
      describe('readAllTestResults', function() {
        it('should call readAllTestResults successfully', function(done) {
          // TODO: uncomment, update parameter values for readAllTestResults call and complete the assertions
          /*
          var runID = 789;
          var testID = 789;
          var projectID = 789;
          var opts = {};
          opts.limit = 789;
          opts.offset = 789;
          opts.describe = "describe_example";
          opts.filterBrowser = "filterBrowser_example";
          opts.filterNetwork = "filterNetwork_example";
          opts.filterLocation = "filterLocation_example";
          opts.filterMediaType = "filterMediaType_example";
          opts.filterVideoFeed = "filterVideoFeed_example";
          opts.filterAudioFeed = "filterAudioFeed_example";
          opts.filterName = "filterName_example";
          opts.filterNumFrom = "filterNumFrom_example";
          opts.filterNumTo = "filterNumTo_example";
          opts.filterGroupName = "filterGroupName_example";
          opts.filterGroupNumFrom = "filterGroupNumFrom_example";
          opts.filterGroupNumTo = "filterGroupNumTo_example";
          opts.filterRecordAudio = "filterRecordAudio_example";
          opts.filterStartFrom = "filterStartFrom_example";
          opts.filterStartTo = "filterStartTo_example";
          opts.filterEndFrom = "filterEndFrom_example";
          opts.filterEndTo = "filterEndTo_example";
          opts.filterStatus = "filterStatus_example";
          opts.filterSeleniumResult = "filterSeleniumResult_example";
          opts.filterDone = "filterDone_example";

          instance.readAllTestResults(runID, testID, projectID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readTestResult', function() {
        it('should call readTestResult successfully', function(done) {
          // TODO: uncomment, update parameter values for readTestResult call and complete the assertions
          /*
          var resultID = 789;
          var runID = 789;
          var testID = 789;
          var projectID = 789;
          var opts = {};
          opts.describe = "describe_example";

          instance.readTestResult(resultID, runID, testID, projectID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.ExtendedResult);
            expect(data.aggregatedMachineStatistics).to.be.a(LoaderoController.MachineStats);
                  expect(data.aggregatedMachineStatistics.avg).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.avg.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.avg.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.avg.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.avg.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.avg.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.avg.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.avg.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.avg.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.avg.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.avg.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.avg.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.avg.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.avg.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.avg.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.max).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.max.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.max.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.max.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.max.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.max.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.max.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.max.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.max.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.max.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.max.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.max.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.max.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.max.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.max.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.min).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.min.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.min.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.min.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.min.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.min.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.min.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.min.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.min.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.min.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.min.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.min.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.min.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.min.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.min.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.perc25).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.perc25.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc25.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc25.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc25.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc25.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc25.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc25.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc25.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc25.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc25.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc25.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc25.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc25.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.perc50).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.perc50.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc50.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc50.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc50.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc50.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc50.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc50.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc50.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc50.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc50.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc50.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc50.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc50.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.perc75).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.perc75.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc75.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc75.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc75.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc75.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc75.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc75.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc75.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc75.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc75.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc75.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc75.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc75.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.perc95).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.perc95.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc95.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc95.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc95.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc95.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc95.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc95.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc95.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc95.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc95.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc95.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc95.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc95.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.perc99).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.perc99.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc99.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc99.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc99.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc99.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc99.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc99.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.perc99.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc99.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc99.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.perc99.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.perc99.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.perc99.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.relativeStdDev).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.relativeStdDev.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.relativeStdDev.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.relativeStdDev.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.relativeStdDev.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.relativeStdDev.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.relativeStdDev.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.relativeStdDev.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.relativeStdDev.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.relativeStdDev.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.stdDev).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.stdDev.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.stdDev.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.stdDev.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.stdDev.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.stdDev.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.stdDev.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.stdDev.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.stdDev.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.stdDev.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.stdDev.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.stdDev.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.stdDev.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.stdDev.networkTx.packetsPerSecond).to.be(0.0);
              expect(data.aggregatedMachineStatistics.total).to.be.a(LoaderoController.Statistics);
                    expect(data.aggregatedMachineStatistics.total.cpuAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.total.cpuAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.total.cpuUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.total.cpuUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.total.memoryAvailable).to.be.a('number');
                expect(data.aggregatedMachineStatistics.total.memoryAvailable).to.be(0.0);
                expect(data.aggregatedMachineStatistics.total.memoryUsage).to.be.a('number');
                expect(data.aggregatedMachineStatistics.total.memoryUsage).to.be(0.0);
                expect(data.aggregatedMachineStatistics.total.networkRx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.total.networkRx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.aggregatedMachineStatistics.total.networkTx).to.be.a(LoaderoController.NetworkStatistics);
                      expect(data.aggregatedMachineStatistics.total.networkTx.bytes).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.bytes).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.dropped).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.dropped).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.errors).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.errors).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.packets).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.packets).to.be(0.0);
                  expect(data.aggregatedMachineStatistics.total.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.aggregatedMachineStatistics.total.networkTx.packetsPerSecond).to.be(0.0);
            expect(data.artifacts).to.be.a(LoaderoController.ArtifactsInfo);
                  expect(data.artifacts.audio).to.be.a(LoaderoController.ArtifactInfo);
                    expect(data.artifacts.audio.error).to.be.a('string');
                expect(data.artifacts.audio.error).to.be("");
                {
                  let dataCtr = data.artifacts.audio.paths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.artifacts.downloads).to.be.a(LoaderoController.ArtifactInfo);
                    expect(data.artifacts.downloads.error).to.be.a('string');
                expect(data.artifacts.downloads.error).to.be("");
                {
                  let dataCtr = data.artifacts.downloads.paths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.artifacts.screenshots).to.be.a(LoaderoController.ArtifactInfo);
                    expect(data.artifacts.screenshots.error).to.be.a('string');
                expect(data.artifacts.screenshots.error).to.be("");
                {
                  let dataCtr = data.artifacts.screenshots.paths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.artifacts.video).to.be.a(LoaderoController.ArtifactInfo);
                    expect(data.artifacts.video.error).to.be.a('string');
                expect(data.artifacts.video.error).to.be("");
                {
                  let dataCtr = data.artifacts.video.paths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
            {
              let dataCtr = data.asserts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LoaderoController.ResultAssert);
                expect(data.actual).to.be.a('string');
                expect(data.actual).to.be("");
                expect(data.created).to.be.a(Date);
                expect(data.created).to.be(new Date());
                expect(data.expected).to.be.a('string');
                expect(data.expected).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.operator).to.be.a('string');
                expect(data.operator).to.be("");
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.resultId).to.be.a('number');
                expect(data.resultId).to.be("0");
                expect(data.runAssertId).to.be.a('number');
                expect(data.runAssertId).to.be("0");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");

                      }
            }
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.end).to.be.a(Date);
            expect(data.end).to.be(new Date());
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.logPaths).to.be.a(LoaderoController.ResultLog);
                  expect(data.logPaths.browser).to.be.a('string');
              expect(data.logPaths.browser).to.be("");
              expect(data.logPaths.created).to.be.a(Date);
              expect(data.logPaths.created).to.be(new Date());
              expect(data.logPaths.id).to.be.a('number');
              expect(data.logPaths.id).to.be("0");
              expect(data.logPaths.resultId).to.be.a('number');
              expect(data.logPaths.resultId).to.be("0");
              expect(data.logPaths.rru).to.be.a('string');
              expect(data.logPaths.rru).to.be("");
              expect(data.logPaths.selenium).to.be.a('string');
              expect(data.logPaths.selenium).to.be("");
              expect(data.logPaths.webrtc).to.be.a('string');
              expect(data.logPaths.webrtc).to.be("");
            {
              let dataCtr = data.machineStats;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LoaderoController.ResultResourceUsage);
                expect(data.cpuAvailable).to.be.a('number');
                expect(data.cpuAvailable).to.be(0.0);
                expect(data.cpuUsage).to.be.a('number');
                expect(data.cpuUsage).to.be(0.0);
                expect(data.created).to.be.a(Date);
                expect(data.created).to.be(new Date());
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.memoryAvailable).to.be.a('number');
                expect(data.memoryAvailable).to.be(0.0);
                expect(data.memoryUsage).to.be.a('number');
                expect(data.memoryUsage).to.be(0.0);
                expect(data.networkRx).to.be.a(LoaderoController.NetworkParams);
                      expect(data.networkRx.bytes).to.be.a('number');
                  expect(data.networkRx.bytes).to.be(0.0);
                  expect(data.networkRx.bytesPerSecond).to.be.a('number');
                  expect(data.networkRx.bytesPerSecond).to.be(0.0);
                  expect(data.networkRx.dropped).to.be.a('number');
                  expect(data.networkRx.dropped).to.be("0");
                  expect(data.networkRx.droppedPerSecond).to.be.a('number');
                  expect(data.networkRx.droppedPerSecond).to.be(0.0);
                  expect(data.networkRx.errors).to.be.a('number');
                  expect(data.networkRx.errors).to.be("0");
                  expect(data.networkRx.errorsPerSecond).to.be.a('number');
                  expect(data.networkRx.errorsPerSecond).to.be(0.0);
                  expect(data.networkRx.packets).to.be.a('number');
                  expect(data.networkRx.packets).to.be("0");
                  expect(data.networkRx.packetsPerSecond).to.be.a('number');
                  expect(data.networkRx.packetsPerSecond).to.be(0.0);
                expect(data.networkTx).to.be.a(LoaderoController.NetworkParams);
                      expect(data.networkTx.bytes).to.be.a('number');
                  expect(data.networkTx.bytes).to.be(0.0);
                  expect(data.networkTx.bytesPerSecond).to.be.a('number');
                  expect(data.networkTx.bytesPerSecond).to.be(0.0);
                  expect(data.networkTx.dropped).to.be.a('number');
                  expect(data.networkTx.dropped).to.be("0");
                  expect(data.networkTx.droppedPerSecond).to.be.a('number');
                  expect(data.networkTx.droppedPerSecond).to.be(0.0);
                  expect(data.networkTx.errors).to.be.a('number');
                  expect(data.networkTx.errors).to.be("0");
                  expect(data.networkTx.errorsPerSecond).to.be.a('number');
                  expect(data.networkTx.errorsPerSecond).to.be(0.0);
                  expect(data.networkTx.packets).to.be.a('number');
                  expect(data.networkTx.packets).to.be("0");
                  expect(data.networkTx.packetsPerSecond).to.be.a('number');
                  expect(data.networkTx.packetsPerSecond).to.be(0.0);
                expect(data.readTime).to.be.a(Date);
                expect(data.readTime).to.be(new Date());
                expect(data.resultId).to.be.a('number');
                expect(data.resultId).to.be("0");

                      }
            }
            expect(data.metrics).to.be.a(LoaderoController.Metrics);
                  expect(data.metrics.machine).to.be.a(LoaderoController.MetricList);
                  expect(data.metrics.webrtc).to.be.a(LoaderoController.MetricList);
      
            expect(data.participantDetails).to.be.a(LoaderoController.RunParticipant);
                  expect(data.participantDetails.computeUnit).to.be.a('string');
              expect(data.participantDetails.computeUnit).to.be("");
              expect(data.participantDetails.created).to.be.a(Date);
              expect(data.participantDetails.created).to.be(new Date());
              expect(data.participantDetails.groupName).to.be.a('string');
              expect(data.participantDetails.groupName).to.be("");
              expect(data.participantDetails.groupNum).to.be.a('number');
              expect(data.participantDetails.groupNum).to.be("0");
              expect(data.participantDetails.id).to.be.a('number');
              expect(data.participantDetails.id).to.be("0");
              expect(data.participantDetails.participantName).to.be.a('string');
              expect(data.participantDetails.participantName).to.be("");
              expect(data.participantDetails.participantNum).to.be.a('number');
              expect(data.participantDetails.participantNum).to.be("0");
              expect(data.participantDetails.profileId).to.be.a('number');
              expect(data.participantDetails.profileId).to.be("0");
              expect(data.participantDetails.recordAudio).to.be.a('boolean');
              expect(data.participantDetails.recordAudio).to.be(false);
              expect(data.participantDetails.runId).to.be.a('number');
              expect(data.participantDetails.runId).to.be("0");
              expect(data.participantDetails.updated).to.be.a(Date);
              expect(data.participantDetails.updated).to.be(new Date());
            expect(data.profileParams).to.be.a(LoaderoController.Params);
                  expect(data.profileParams.audioFeed).to.be.a('string');
              expect(data.profileParams.audioFeed).to.be("");
              expect(data.profileParams.browser).to.be.a('string');
              expect(data.profileParams.browser).to.be("");
              expect(data.profileParams.location).to.be.a('string');
              expect(data.profileParams.location).to.be("");
              expect(data.profileParams.mediaType).to.be.a('string');
              expect(data.profileParams.mediaType).to.be("");
              expect(data.profileParams.network).to.be.a('string');
              expect(data.profileParams.network).to.be("");
              expect(data.profileParams.videoFeed).to.be.a('string');
              expect(data.profileParams.videoFeed).to.be("");
            expect(data.runParticipantId).to.be.a('number');
            expect(data.runParticipantId).to.be("0");
            expect(data.seleniumResult).to.be.a('string');
            expect(data.seleniumResult).to.be("");
            expect(data.start).to.be.a(Date);
            expect(data.start).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readTestResultStatistics', function() {
        it('should call readTestResultStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for readTestResultStatistics call and complete the assertions
          /*
          var runID = 789;
          var testID = 789;
          var projectID = 789;
          var opts = {};
          opts.describe = "describe_example";

          instance.readTestResultStatistics(runID, testID, projectID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
