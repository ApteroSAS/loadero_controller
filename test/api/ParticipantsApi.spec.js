/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoaderoController.ParticipantsApi();
  });

  describe('(package)', function() {
    describe('ParticipantsApi', function() {
      describe('createParticipant', function() {
        it('should call createParticipant successfully', function(done) {
          // TODO: uncomment, update parameter values for createParticipant call and complete the assertions
          /*
          var projectID = 789;
          var testID = 789;
          var opts = {};
          opts.describe = "describe_example";
          opts.participant = new LoaderoController.ParticipantBody();
          opts.participant.audioFeed = "";
          opts.participant.browser = "";
          opts.participant.computeUnit = "";
          opts.participant.count = "0";
          opts.participant.groupId = "0";
          opts.participant.location = "";
          opts.participant.mediaType = "";
          opts.participant.name = "";
          opts.participant.network = "";
          opts.participant.recordAudio = false;
          opts.participant.videoFeed = "";

          instance.createParticipant(projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.ParticipantBody);
            expect(data.audioFeed).to.be.a('string');
            expect(data.audioFeed).to.be("");
            expect(data.browser).to.be.a('string');
            expect(data.browser).to.be("");
            expect(data.computeUnit).to.be.a('string');
            expect(data.computeUnit).to.be("");
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.mediaType).to.be.a('string');
            expect(data.mediaType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.profileId).to.be.a('number');
            expect(data.profileId).to.be("0");
            expect(data.recordAudio).to.be.a('boolean');
            expect(data.recordAudio).to.be(false);
            expect(data.testId).to.be.a('number');
            expect(data.testId).to.be("0");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.videoFeed).to.be.a('string');
            expect(data.videoFeed).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteParticipant', function() {
        it('should call deleteParticipant successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteParticipant call
          /*
          var participantID = 789;
          var projectID = 789;
          var testID = 789;

          instance.deleteParticipant(participantID, projectID, testID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('duplicateParticipant', function() {
        it('should call duplicateParticipant successfully', function(done) {
          // TODO: uncomment, update parameter values for duplicateParticipant call and complete the assertions
          /*
          var participantID = 789;
          var projectID = 789;
          var testID = 789;
          var opts = {};
          opts.body = new LoaderoController.Body();
          opts.describe = "describe_example";

          instance.duplicateParticipant(participantID, projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.ParticipantBody);
            expect(data.audioFeed).to.be.a('string');
            expect(data.audioFeed).to.be("");
            expect(data.browser).to.be.a('string');
            expect(data.browser).to.be("");
            expect(data.computeUnit).to.be.a('string');
            expect(data.computeUnit).to.be("");
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.mediaType).to.be.a('string');
            expect(data.mediaType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.profileId).to.be.a('number');
            expect(data.profileId).to.be("0");
            expect(data.recordAudio).to.be.a('boolean');
            expect(data.recordAudio).to.be(false);
            expect(data.testId).to.be.a('number');
            expect(data.testId).to.be("0");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.videoFeed).to.be.a('string');
            expect(data.videoFeed).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readAllParticipants', function() {
        it('should call readAllParticipants successfully', function(done) {
          // TODO: uncomment, update parameter values for readAllParticipants call and complete the assertions
          /*
          var projectID = 789;
          var testID = 789;
          var opts = {};
          opts.limit = 789;
          opts.offset = 789;
          opts.describe = "describe_example";
          opts.filterBrowser = "filterBrowser_example";
          opts.filterNetwork = "filterNetwork_example";
          opts.filterLocation = "filterLocation_example";
          opts.filterMediaType = "filterMediaType_example";
          opts.filterVideoFeed = "filterVideoFeed_example";
          opts.filterAudioFeed = "filterAudioFeed_example";
          opts.filterName = "filterName_example";
          opts.filterCountFrom = "filterCountFrom_example";
          opts.filterCountTo = "filterCountTo_example";
          opts.filterComputeUnit = "filterComputeUnit_example";
          opts.filterHasGroup = "filterHasGroup_example";
          opts.filterRecordAudio = "filterRecordAudio_example";

          instance.readAllParticipants(projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readParticipant', function() {
        it('should call readParticipant successfully', function(done) {
          // TODO: uncomment, update parameter values for readParticipant call and complete the assertions
          /*
          var participantID = 789;
          var projectID = 789;
          var testID = 789;
          var opts = {};
          opts.describe = "describe_example";

          instance.readParticipant(participantID, projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.ParticipantBody);
            expect(data.audioFeed).to.be.a('string');
            expect(data.audioFeed).to.be("");
            expect(data.browser).to.be.a('string');
            expect(data.browser).to.be("");
            expect(data.computeUnit).to.be.a('string');
            expect(data.computeUnit).to.be("");
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.mediaType).to.be.a('string');
            expect(data.mediaType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.profileId).to.be.a('number');
            expect(data.profileId).to.be("0");
            expect(data.recordAudio).to.be.a('boolean');
            expect(data.recordAudio).to.be(false);
            expect(data.testId).to.be.a('number');
            expect(data.testId).to.be("0");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.videoFeed).to.be.a('string');
            expect(data.videoFeed).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateParticipant', function() {
        it('should call updateParticipant successfully', function(done) {
          // TODO: uncomment, update parameter values for updateParticipant call and complete the assertions
          /*
          var participantID = 789;
          var projectID = 789;
          var testID = 789;
          var opts = {};
          opts.describe = "describe_example";
          opts.participant = new LoaderoController.ParticipantBody();
          opts.participant.audioFeed = "";
          opts.participant.browser = "";
          opts.participant.computeUnit = "";
          opts.participant.count = "0";
          opts.participant.groupId = "0";
          opts.participant.location = "";
          opts.participant.mediaType = "";
          opts.participant.name = "";
          opts.participant.network = "";
          opts.participant.recordAudio = false;
          opts.participant.videoFeed = "";

          instance.updateParticipant(participantID, projectID, testID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LoaderoController.ParticipantBody);
            expect(data.audioFeed).to.be.a('string');
            expect(data.audioFeed).to.be("");
            expect(data.browser).to.be.a('string');
            expect(data.browser).to.be("");
            expect(data.computeUnit).to.be.a('string');
            expect(data.computeUnit).to.be("");
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.groupId).to.be.a('number');
            expect(data.groupId).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.mediaType).to.be.a('string');
            expect(data.mediaType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.network).to.be.a('string');
            expect(data.network).to.be("");
            expect(data.profileId).to.be.a('number');
            expect(data.profileId).to.be("0");
            expect(data.recordAudio).to.be.a('boolean');
            expect(data.recordAudio).to.be(false);
            expect(data.testId).to.be.a('number');
            expect(data.testId).to.be("0");
            expect(data.updated).to.be.a(Date);
            expect(data.updated).to.be(new Date());
            expect(data.videoFeed).to.be.a('string');
            expect(data.videoFeed).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
