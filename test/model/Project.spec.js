/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Project', function() {
      beforeEach(function() {
        instance = new LoaderoController.Project();
      });

      it('should create an instance of Project', function() {
        // TODO: update the code to test Project
        expect(instance).to.be.a(LoaderoController.Project);
      });

      it('should have the property accountRole (base name: "account_role")', function() {
        // TODO: update the code to test the property accountRole
        expect(instance).to.have.property('accountRole');
        // expect(instance.accountRole).to.be(expectedValueLiteral);
      });

      it('should have the property awsInfoId (base name: "aws_info_id")', function() {
        // TODO: update the code to test the property awsInfoId
        expect(instance).to.have.property('awsInfoId');
        // expect(instance.awsInfoId).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property memberCount (base name: "member_count")', function() {
        // TODO: update the code to test the property memberCount
        expect(instance).to.have.property('memberCount');
        // expect(instance.memberCount).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionId (base name: "subscription_id")', function() {
        // TODO: update the code to test the property subscriptionId
        expect(instance).to.have.property('subscriptionId');
        // expect(instance.subscriptionId).to.be(expectedValueLiteral);
      });

      it('should have the property trialExpired (base name: "trial_expired")', function() {
        // TODO: update the code to test the property trialExpired
        expect(instance).to.have.property('trialExpired');
        // expect(instance.trialExpired).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

    });
  });

}));
