/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MachineStats', function() {
      beforeEach(function() {
        instance = new LoaderoController.MachineStats();
      });

      it('should create an instance of MachineStats', function() {
        // TODO: update the code to test MachineStats
        expect(instance).to.be.a(LoaderoController.MachineStats);
      });

      it('should have the property avg (base name: "avg")', function() {
        // TODO: update the code to test the property avg
        expect(instance).to.have.property('avg');
        // expect(instance.avg).to.be(expectedValueLiteral);
      });

      it('should have the property max (base name: "max")', function() {
        // TODO: update the code to test the property max
        expect(instance).to.have.property('max');
        // expect(instance.max).to.be(expectedValueLiteral);
      });

      it('should have the property min (base name: "min")', function() {
        // TODO: update the code to test the property min
        expect(instance).to.have.property('min');
        // expect(instance.min).to.be(expectedValueLiteral);
      });

      it('should have the property perc25 (base name: "perc_25")', function() {
        // TODO: update the code to test the property perc25
        expect(instance).to.have.property('perc25');
        // expect(instance.perc25).to.be(expectedValueLiteral);
      });

      it('should have the property perc50 (base name: "perc_50")', function() {
        // TODO: update the code to test the property perc50
        expect(instance).to.have.property('perc50');
        // expect(instance.perc50).to.be(expectedValueLiteral);
      });

      it('should have the property perc75 (base name: "perc_75")', function() {
        // TODO: update the code to test the property perc75
        expect(instance).to.have.property('perc75');
        // expect(instance.perc75).to.be(expectedValueLiteral);
      });

      it('should have the property perc95 (base name: "perc_95")', function() {
        // TODO: update the code to test the property perc95
        expect(instance).to.have.property('perc95');
        // expect(instance.perc95).to.be(expectedValueLiteral);
      });

      it('should have the property perc99 (base name: "perc_99")', function() {
        // TODO: update the code to test the property perc99
        expect(instance).to.have.property('perc99');
        // expect(instance.perc99).to.be(expectedValueLiteral);
      });

      it('should have the property relativeStdDev (base name: "relative_std_dev")', function() {
        // TODO: update the code to test the property relativeStdDev
        expect(instance).to.have.property('relativeStdDev');
        // expect(instance.relativeStdDev).to.be(expectedValueLiteral);
      });

      it('should have the property stdDev (base name: "std_dev")', function() {
        // TODO: update the code to test the property stdDev
        expect(instance).to.have.property('stdDev');
        // expect(instance.stdDev).to.be(expectedValueLiteral);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

    });
  });

}));
