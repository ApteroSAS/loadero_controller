/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Metric', function() {
      beforeEach(function() {
        instance = new LoaderoController.Metric();
      });

      it('should create an instance of Metric', function() {
        // TODO: update the code to test Metric
        expect(instance).to.be.a(LoaderoController.Metric);
      });

      it('should have the property average (base name: "average")', function() {
        // TODO: update the code to test the property average
        expect(instance).to.have.property('average');
        // expect(instance.average).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property dataCount (base name: "data_count")', function() {
        // TODO: update the code to test the property dataCount
        expect(instance).to.have.property('dataCount');
        // expect(instance.dataCount).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property maximum (base name: "maximum")', function() {
        // TODO: update the code to test the property maximum
        expect(instance).to.have.property('maximum');
        // expect(instance.maximum).to.be(expectedValueLiteral);
      });

      it('should have the property metricPath (base name: "metric_path")', function() {
        // TODO: update the code to test the property metricPath
        expect(instance).to.have.property('metricPath');
        // expect(instance.metricPath).to.be(expectedValueLiteral);
      });

      it('should have the property minimum (base name: "minimum")', function() {
        // TODO: update the code to test the property minimum
        expect(instance).to.have.property('minimum');
        // expect(instance.minimum).to.be(expectedValueLiteral);
      });

      it('should have the property perc25th (base name: "perc_25th")', function() {
        // TODO: update the code to test the property perc25th
        expect(instance).to.have.property('perc25th');
        // expect(instance.perc25th).to.be(expectedValueLiteral);
      });

      it('should have the property perc50th (base name: "perc_50th")', function() {
        // TODO: update the code to test the property perc50th
        expect(instance).to.have.property('perc50th');
        // expect(instance.perc50th).to.be(expectedValueLiteral);
      });

      it('should have the property perc75th (base name: "perc_75th")', function() {
        // TODO: update the code to test the property perc75th
        expect(instance).to.have.property('perc75th');
        // expect(instance.perc75th).to.be(expectedValueLiteral);
      });

      it('should have the property perc95th (base name: "perc_95th")', function() {
        // TODO: update the code to test the property perc95th
        expect(instance).to.have.property('perc95th');
        // expect(instance.perc95th).to.be(expectedValueLiteral);
      });

      it('should have the property perc99th (base name: "perc_99th")', function() {
        // TODO: update the code to test the property perc99th
        expect(instance).to.have.property('perc99th');
        // expect(instance.perc99th).to.be(expectedValueLiteral);
      });

      it('should have the property stddev (base name: "stddev")', function() {
        // TODO: update the code to test the property stddev
        expect(instance).to.have.property('stddev');
        // expect(instance.stddev).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

    });
  });

}));
