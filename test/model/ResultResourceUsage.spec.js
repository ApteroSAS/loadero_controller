/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ResultResourceUsage', function() {
      beforeEach(function() {
        instance = new LoaderoController.ResultResourceUsage();
      });

      it('should create an instance of ResultResourceUsage', function() {
        // TODO: update the code to test ResultResourceUsage
        expect(instance).to.be.a(LoaderoController.ResultResourceUsage);
      });

      it('should have the property cpuAvailable (base name: "cpu_available")', function() {
        // TODO: update the code to test the property cpuAvailable
        expect(instance).to.have.property('cpuAvailable');
        // expect(instance.cpuAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property cpuUsage (base name: "cpu_usage")', function() {
        // TODO: update the code to test the property cpuUsage
        expect(instance).to.have.property('cpuUsage');
        // expect(instance.cpuUsage).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property memoryAvailable (base name: "memory_available")', function() {
        // TODO: update the code to test the property memoryAvailable
        expect(instance).to.have.property('memoryAvailable');
        // expect(instance.memoryAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property memoryUsage (base name: "memory_usage")', function() {
        // TODO: update the code to test the property memoryUsage
        expect(instance).to.have.property('memoryUsage');
        // expect(instance.memoryUsage).to.be(expectedValueLiteral);
      });

      it('should have the property networkRx (base name: "network_rx")', function() {
        // TODO: update the code to test the property networkRx
        expect(instance).to.have.property('networkRx');
        // expect(instance.networkRx).to.be(expectedValueLiteral);
      });

      it('should have the property networkTx (base name: "network_tx")', function() {
        // TODO: update the code to test the property networkTx
        expect(instance).to.have.property('networkTx');
        // expect(instance.networkTx).to.be(expectedValueLiteral);
      });

      it('should have the property readTime (base name: "read_time")', function() {
        // TODO: update the code to test the property readTime
        expect(instance).to.have.property('readTime');
        // expect(instance.readTime).to.be(expectedValueLiteral);
      });

      it('should have the property resultId (base name: "result_id")', function() {
        // TODO: update the code to test the property resultId
        expect(instance).to.have.property('resultId');
        // expect(instance.resultId).to.be(expectedValueLiteral);
      });

    });
  });

}));
