/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RunParticipantBody', function() {
      beforeEach(function() {
        instance = new LoaderoController.RunParticipantBody();
      });

      it('should create an instance of RunParticipantBody', function() {
        // TODO: update the code to test RunParticipantBody
        expect(instance).to.be.a(LoaderoController.RunParticipantBody);
      });

      it('should have the property audioFeed (base name: "audio_feed")', function() {
        // TODO: update the code to test the property audioFeed
        expect(instance).to.have.property('audioFeed');
        // expect(instance.audioFeed).to.be(expectedValueLiteral);
      });

      it('should have the property browser (base name: "browser")', function() {
        // TODO: update the code to test the property browser
        expect(instance).to.have.property('browser');
        // expect(instance.browser).to.be(expectedValueLiteral);
      });

      it('should have the property computeUnit (base name: "compute_unit")', function() {
        // TODO: update the code to test the property computeUnit
        expect(instance).to.have.property('computeUnit');
        // expect(instance.computeUnit).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "group_name")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property groupNum (base name: "group_num")', function() {
        // TODO: update the code to test the property groupNum
        expect(instance).to.have.property('groupNum');
        // expect(instance.groupNum).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property mediaType (base name: "media_type")', function() {
        // TODO: update the code to test the property mediaType
        expect(instance).to.have.property('mediaType');
        // expect(instance.mediaType).to.be(expectedValueLiteral);
      });

      it('should have the property network (base name: "network")', function() {
        // TODO: update the code to test the property network
        expect(instance).to.have.property('network');
        // expect(instance.network).to.be(expectedValueLiteral);
      });

      it('should have the property participantName (base name: "participant_name")', function() {
        // TODO: update the code to test the property participantName
        expect(instance).to.have.property('participantName');
        // expect(instance.participantName).to.be(expectedValueLiteral);
      });

      it('should have the property participantNum (base name: "participant_num")', function() {
        // TODO: update the code to test the property participantNum
        expect(instance).to.have.property('participantNum');
        // expect(instance.participantNum).to.be(expectedValueLiteral);
      });

      it('should have the property profileId (base name: "profile_id")', function() {
        // TODO: update the code to test the property profileId
        expect(instance).to.have.property('profileId');
        // expect(instance.profileId).to.be(expectedValueLiteral);
      });

      it('should have the property recordAudio (base name: "record_audio")', function() {
        // TODO: update the code to test the property recordAudio
        expect(instance).to.have.property('recordAudio');
        // expect(instance.recordAudio).to.be(expectedValueLiteral);
      });

      it('should have the property runId (base name: "run_id")', function() {
        // TODO: update the code to test the property runId
        expect(instance).to.have.property('runId');
        // expect(instance.runId).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property videoFeed (base name: "video_feed")', function() {
        // TODO: update the code to test the property videoFeed
        expect(instance).to.have.property('videoFeed');
        // expect(instance.videoFeed).to.be(expectedValueLiteral);
      });

    });
  });

}));
