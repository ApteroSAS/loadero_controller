/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TokenInfo', function() {
      beforeEach(function() {
        instance = new LoaderoController.TokenInfo();
      });

      it('should create an instance of TokenInfo', function() {
        // TODO: update the code to test TokenInfo
        expect(instance).to.be.a(LoaderoController.TokenInfo);
      });

      it('should have the property accessToken (base name: "access_token")', function() {
        // TODO: update the code to test the property accessToken
        expect(instance).to.have.property('accessToken');
        // expect(instance.accessToken).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property exp (base name: "exp")', function() {
        // TODO: update the code to test the property exp
        expect(instance).to.have.property('exp');
        // expect(instance.exp).to.be(expectedValueLiteral);
      });

      it('should have the property expiresIn (base name: "expires_in")', function() {
        // TODO: update the code to test the property expiresIn
        expect(instance).to.have.property('expiresIn');
        // expect(instance.expiresIn).to.be(expectedValueLiteral);
      });

      it('should have the property scopes (base name: "scopes")', function() {
        // TODO: update the code to test the property scopes
        expect(instance).to.have.property('scopes');
        // expect(instance.scopes).to.be(expectedValueLiteral);
      });

      it('should have the property tokenType (base name: "token_type")', function() {
        // TODO: update the code to test the property tokenType
        expect(instance).to.have.property('tokenType');
        // expect(instance.tokenType).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

    });
  });

}));
