/*
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoaderoController);
  }
}(this, function(expect, LoaderoController) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BillingInfo', function() {
      beforeEach(function() {
        instance = new LoaderoController.BillingInfo();
      });

      it('should create an instance of BillingInfo', function() {
        // TODO: update the code to test BillingInfo
        expect(instance).to.be.a(LoaderoController.BillingInfo);
      });

      it('should have the property billingAddress (base name: "billing_address")', function() {
        // TODO: update the code to test the property billingAddress
        expect(instance).to.have.property('billingAddress');
        // expect(instance.billingAddress).to.be(expectedValueLiteral);
      });

      it('should have the property buyerKind (base name: "buyer_kind")', function() {
        // TODO: update the code to test the property buyerKind
        expect(instance).to.have.property('buyerKind');
        // expect(instance.buyerKind).to.be(expectedValueLiteral);
      });

      it('should have the property defaultPaymentMethod (base name: "default_payment_method")', function() {
        // TODO: update the code to test the property defaultPaymentMethod
        expect(instance).to.have.property('defaultPaymentMethod');
        // expect(instance.defaultPaymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property invoices (base name: "invoices")', function() {
        // TODO: update the code to test the property invoices
        expect(instance).to.have.property('invoices');
        // expect(instance.invoices).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property nextInvoice (base name: "next_invoice")', function() {
        // TODO: update the code to test the property nextInvoice
        expect(instance).to.have.property('nextInvoice');
        // expect(instance.nextInvoice).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethods (base name: "payment_methods")', function() {
        // TODO: update the code to test the property paymentMethods
        expect(instance).to.have.property('paymentMethods');
        // expect(instance.paymentMethods).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionId (base name: "subscription_id")', function() {
        // TODO: update the code to test the property subscriptionId
        expect(instance).to.have.property('subscriptionId');
        // expect(instance.subscriptionId).to.be(expectedValueLiteral);
      });

      it('should have the property vatInfo (base name: "vat_info")', function() {
        // TODO: update the code to test the property vatInfo
        expect(instance).to.have.property('vatInfo');
        // expect(instance.vatInfo).to.be(expectedValueLiteral);
      });

    });
  });

}));
