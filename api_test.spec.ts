/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AssertApi", () => {
  let instance: api.AssertApi
  beforeEach(function() {
    instance = new api.AssertApi(config)
  });

  test("createAssert", () => {
    const projectID: number = 789
    const testID: number = 789
    const body: api.Assert = undefined
    const describe: string = "describe_example"
    return expect(instance.createAssert(projectID, testID, body, describe, {})).resolves.toBe(null)
  })
  test("deleteAssert", () => {
    const assertID: number = 789
    const projectID: number = 789
    const testID: number = 789
    return expect(instance.deleteAssert(assertID, projectID, testID, {})).resolves.toBe(null)
  })
  test("duplicateAssert", () => {
    const assertID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const describe: string = "describe_example"
    return expect(instance.duplicateAssert(assertID, projectID, testID, describe, {})).resolves.toBe(null)
  })
  test("readAllAsserts", () => {
    const projectID: number = 789
    const testID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterPath: string = "filterPath_example"
    const filterOperator: string = "filterOperator_example"
    const filterExpected: string = "filterExpected_example"
    return expect(instance.readAllAsserts(projectID, testID, limit, offset, describe, filterPath, filterOperator, filterExpected, {})).resolves.toBe(null)
  })
  test("readAssert", () => {
    const assertID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readAssert(assertID, projectID, testID, describe, {})).resolves.toBe(null)
  })
  test("updateAssert", () => {
    const assertID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const body: api.Assert = undefined
    const describe: string = "describe_example"
    return expect(instance.updateAssert(assertID, projectID, testID, body, describe, {})).resolves.toBe(null)
  })
})

describe("FileApi", () => {
  let instance: api.FileApi
  beforeEach(function() {
    instance = new api.FileApi(config)
  });

  test("readFile", () => {
    const fileID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readFile(fileID, projectID, describe, {})).resolves.toBe(null)
  })
})

describe("GroupApi", () => {
  let instance: api.GroupApi
  beforeEach(function() {
    instance = new api.GroupApi(config)
  });

  test("createGroup", () => {
    const projectID: number = 789
    const testID: number = 789
    const body: api.Group = undefined
    const describe: string = "describe_example"
    return expect(instance.createGroup(projectID, testID, body, describe, {})).resolves.toBe(null)
  })
  test("deleteGroup", () => {
    const groupID: number = 789
    const projectID: number = 789
    const testID: number = 789
    return expect(instance.deleteGroup(groupID, projectID, testID, {})).resolves.toBe(null)
  })
  test("duplicateGroup", () => {
    const groupID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const body: api.GroupIDCopyBody = undefined
    const describe: string = "describe_example"
    return expect(instance.duplicateGroup(groupID, projectID, testID, body, describe, {})).resolves.toBe(null)
  })
  test("readAllGroups", () => {
    const projectID: number = 789
    const testID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterName: string = "filterName_example"
    const filterCountFrom: string = "filterCountFrom_example"
    const filterCountTo: string = "filterCountTo_example"
    return expect(instance.readAllGroups(projectID, testID, limit, offset, describe, filterName, filterCountFrom, filterCountTo, {})).resolves.toBe(null)
  })
  test("readGroup", () => {
    const groupID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readGroup(groupID, projectID, testID, describe, {})).resolves.toBe(null)
  })
  test("updateGroup", () => {
    const groupID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const body: api.Group = undefined
    const describe: string = "describe_example"
    return expect(instance.updateGroup(groupID, projectID, testID, body, describe, {})).resolves.toBe(null)
  })
})

describe("GroupparticipantsApi", () => {
  let instance: api.GroupparticipantsApi
  beforeEach(function() {
    instance = new api.GroupparticipantsApi(config)
  });

  test("createGroupParticipant", () => {
    const projectID: number = 789
    const testID: number = 789
    const groupID: number = 789
    const body: api.GroupParticipantBody = undefined
    const describe: string = "describe_example"
    return expect(instance.createGroupParticipant(projectID, testID, groupID, body, describe, {})).resolves.toBe(null)
  })
  test("deleteGroupParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const groupID: number = 789
    return expect(instance.deleteGroupParticipant(participantID, projectID, testID, groupID, {})).resolves.toBe(null)
  })
  test("duplicateGroupParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const groupID: number = 789
    const describe: string = "describe_example"
    return expect(instance.duplicateGroupParticipant(participantID, projectID, testID, groupID, describe, {})).resolves.toBe(null)
  })
  test("readAllGroupParticipants", () => {
    const projectID: number = 789
    const testID: number = 789
    const groupID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterBrowser: string = "filterBrowser_example"
    const filterNetwork: string = "filterNetwork_example"
    const filterLocation: string = "filterLocation_example"
    const filterMediaType: string = "filterMediaType_example"
    const filterVideoFeed: string = "filterVideoFeed_example"
    const filterAudioFeed: string = "filterAudioFeed_example"
    const filterName: string = "filterName_example"
    const filterCountFrom: string = "filterCountFrom_example"
    const filterCountTo: string = "filterCountTo_example"
    const filterComputeUnit: string = "filterComputeUnit_example"
    const filterHasGroup: string = "filterHasGroup_example"
    const filterRecordAudio: string = "filterRecordAudio_example"
    return expect(instance.readAllGroupParticipants(projectID, testID, groupID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, {})).resolves.toBe(null)
  })
  test("readGroupParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const groupID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readGroupParticipant(participantID, projectID, testID, groupID, describe, {})).resolves.toBe(null)
  })
  test("updateGroupParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const groupID: number = 789
    const body: api.GroupParticipantBody = undefined
    const describe: string = "describe_example"
    return expect(instance.updateGroupParticipant(participantID, projectID, testID, groupID, body, describe, {})).resolves.toBe(null)
  })
})

describe("ParticipantsApi", () => {
  let instance: api.ParticipantsApi
  beforeEach(function() {
    instance = new api.ParticipantsApi(config)
  });

  test("createParticipant", () => {
    const projectID: number = 789
    const testID: number = 789
    const body: api.ParticipantBody = undefined
    const describe: string = "describe_example"
    return expect(instance.createParticipant(projectID, testID, body, describe, {})).resolves.toBe(null)
  })
  test("deleteParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    return expect(instance.deleteParticipant(participantID, projectID, testID, {})).resolves.toBe(null)
  })
  test("duplicateParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const body: api.ParticipantIDCopyBody = undefined
    const describe: string = "describe_example"
    return expect(instance.duplicateParticipant(participantID, projectID, testID, body, describe, {})).resolves.toBe(null)
  })
  test("readAllParticipants", () => {
    const projectID: number = 789
    const testID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterBrowser: string = "filterBrowser_example"
    const filterNetwork: string = "filterNetwork_example"
    const filterLocation: string = "filterLocation_example"
    const filterMediaType: string = "filterMediaType_example"
    const filterVideoFeed: string = "filterVideoFeed_example"
    const filterAudioFeed: string = "filterAudioFeed_example"
    const filterName: string = "filterName_example"
    const filterCountFrom: string = "filterCountFrom_example"
    const filterCountTo: string = "filterCountTo_example"
    const filterComputeUnit: string = "filterComputeUnit_example"
    const filterHasGroup: string = "filterHasGroup_example"
    const filterRecordAudio: string = "filterRecordAudio_example"
    return expect(instance.readAllParticipants(projectID, testID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, {})).resolves.toBe(null)
  })
  test("readParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readParticipant(participantID, projectID, testID, describe, {})).resolves.toBe(null)
  })
  test("updateParticipant", () => {
    const participantID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const body: api.ParticipantBody = undefined
    const describe: string = "describe_example"
    return expect(instance.updateParticipant(participantID, projectID, testID, body, describe, {})).resolves.toBe(null)
  })
})

describe("PreconditionApi", () => {
  let instance: api.PreconditionApi
  beforeEach(function() {
    instance = new api.PreconditionApi(config)
  });

  test("createPrecondition", () => {
    const projectID: number = 789
    const testID: number = 789
    const assertID: number = 789
    const body: api.AssertPrecondition = undefined
    const describe: string = "describe_example"
    return expect(instance.createPrecondition(projectID, testID, assertID, body, describe, {})).resolves.toBe(null)
  })
  test("deletePrecondition", () => {
    const preconditionID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const assertID: number = 789
    return expect(instance.deletePrecondition(preconditionID, projectID, testID, assertID, {})).resolves.toBe(null)
  })
  test("readAllPreconditions", () => {
    const projectID: number = 789
    const testID: number = 789
    const assertID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterProperty: string = "filterProperty_example"
    const filterOperator: string = "filterOperator_example"
    const filterExpected: string = "filterExpected_example"
    return expect(instance.readAllPreconditions(projectID, testID, assertID, limit, offset, describe, filterProperty, filterOperator, filterExpected, {})).resolves.toBe(null)
  })
  test("readPrecondition", () => {
    const preconditionID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const assertID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readPrecondition(preconditionID, projectID, testID, assertID, describe, {})).resolves.toBe(null)
  })
  test("updatePrecondition", () => {
    const preconditionID: number = 789
    const projectID: number = 789
    const testID: number = 789
    const assertID: number = 789
    const body: api.AssertPrecondition = undefined
    const describe: string = "describe_example"
    return expect(instance.updatePrecondition(preconditionID, projectID, testID, assertID, body, describe, {})).resolves.toBe(null)
  })
})

describe("ProjectApi", () => {
  let instance: api.ProjectApi
  beforeEach(function() {
    instance = new api.ProjectApi(config)
  });

  test("readProject", () => {
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readProject(projectID, describe, {})).resolves.toBe(null)
  })
})

describe("ProjectresultApi", () => {
  let instance: api.ProjectresultApi
  beforeEach(function() {
    instance = new api.ProjectresultApi(config)
  });

  test("readAllProjectResults", () => {
    const runID: number = 789
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterBrowser: string = "filterBrowser_example"
    const filterNetwork: string = "filterNetwork_example"
    const filterLocation: string = "filterLocation_example"
    const filterMediaType: string = "filterMediaType_example"
    const filterVideoFeed: string = "filterVideoFeed_example"
    const filterAudioFeed: string = "filterAudioFeed_example"
    const filterName: string = "filterName_example"
    const filterNumFrom: string = "filterNumFrom_example"
    const filterNumTo: string = "filterNumTo_example"
    const filterGroupName: string = "filterGroupName_example"
    const filterGroupNumFrom: string = "filterGroupNumFrom_example"
    const filterGroupNumTo: string = "filterGroupNumTo_example"
    const filterRecordAudio: string = "filterRecordAudio_example"
    const filterStartFrom: string = "filterStartFrom_example"
    const filterStartTo: string = "filterStartTo_example"
    const filterEndFrom: string = "filterEndFrom_example"
    const filterEndTo: string = "filterEndTo_example"
    const filterStatus: string = "filterStatus_example"
    const filterSeleniumResult: string = "filterSeleniumResult_example"
    const filterDone: string = "filterDone_example"
    return expect(instance.readAllProjectResults(runID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, filterStartFrom, filterStartTo, filterEndFrom, filterEndTo, filterStatus, filterSeleniumResult, filterDone, {})).resolves.toBe(null)
  })
  test("readProjectResult", () => {
    const resultID: number = 789
    const runID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readProjectResult(resultID, runID, projectID, describe, {})).resolves.toBe(null)
  })
  test("readProjectResultStatistics", () => {
    const runID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readProjectResultStatistics(runID, projectID, describe, {})).resolves.toBe(null)
  })
})

describe("ProjectrunApi", () => {
  let instance: api.ProjectrunApi
  beforeEach(function() {
    instance = new api.ProjectrunApi(config)
  });

  test("readAllProjectRuns", () => {
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterTestName: string = "filterTestName_example"
    const filterStartedFrom: string = "filterStartedFrom_example"
    const filterStartedTo: string = "filterStartedTo_example"
    const filterFinishedFrom: string = "filterFinishedFrom_example"
    const filterFinishedTo: string = "filterFinishedTo_example"
    const filterExecutionStartedFrom: string = "filterExecutionStartedFrom_example"
    const filterExecutionStartedTo: string = "filterExecutionStartedTo_example"
    const filterExecutionFinishedFrom: string = "filterExecutionFinishedFrom_example"
    const filterExecutionFinishedTo: string = "filterExecutionFinishedTo_example"
    const filterIncrementStrategy: string = "filterIncrementStrategy_example"
    const filterStatus: string = "filterStatus_example"
    const filterTestMode: string = "filterTestMode_example"
    const filterStartIntervalFrom: string = "filterStartIntervalFrom_example"
    const filterStartIntervalTo: string = "filterStartIntervalTo_example"
    const filterParticipantTimeoutFrom: string = "filterParticipantTimeoutFrom_example"
    const filterParticipantTimeoutTo: string = "filterParticipantTimeoutTo_example"
    const filterActive: string = "filterActive_example"
    return expect(instance.readAllProjectRuns(projectID, limit, offset, describe, filterTestName, filterStartedFrom, filterStartedTo, filterFinishedFrom, filterFinishedTo, filterExecutionStartedFrom, filterExecutionStartedTo, filterExecutionFinishedFrom, filterExecutionFinishedTo, filterIncrementStrategy, filterStatus, filterTestMode, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, filterActive, {})).resolves.toBe(null)
  })
  test("readProjectRun", () => {
    const projectID: number = 789
    const runID: number = 789
    return expect(instance.readProjectRun(projectID, runID, {})).resolves.toBe(null)
  })
})

describe("ProjectrunparticipantApi", () => {
  let instance: api.ProjectrunparticipantApi
  beforeEach(function() {
    instance = new api.ProjectrunparticipantApi(config)
  });

  test("readAllProjectRunParticipants", () => {
    const runID: number = 789
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterBrowser: string = "filterBrowser_example"
    const filterNetwork: string = "filterNetwork_example"
    const filterLocation: string = "filterLocation_example"
    const filterMediaType: string = "filterMediaType_example"
    const filterVideoFeed: string = "filterVideoFeed_example"
    const filterAudioFeed: string = "filterAudioFeed_example"
    const filterName: string = "filterName_example"
    const filterNumFrom: string = "filterNumFrom_example"
    const filterNumTo: string = "filterNumTo_example"
    const filterGroupName: string = "filterGroupName_example"
    const filterGroupNumFrom: string = "filterGroupNumFrom_example"
    const filterGroupNumTo: string = "filterGroupNumTo_example"
    const filterRecordAudio: string = "filterRecordAudio_example"
    return expect(instance.readAllProjectRunParticipants(runID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, {})).resolves.toBe(null)
  })
  test("readProjectRunParticipant", () => {
    const runParticipantID: number = 789
    const runID: number = 789
    const projectID: number = 789
    return expect(instance.readProjectRunParticipant(runParticipantID, runID, projectID, {})).resolves.toBe(null)
  })
})

describe("ResultApi", () => {
  let instance: api.ResultApi
  beforeEach(function() {
    instance = new api.ResultApi(config)
  });

  test("readAllTestResults", () => {
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterBrowser: string = "filterBrowser_example"
    const filterNetwork: string = "filterNetwork_example"
    const filterLocation: string = "filterLocation_example"
    const filterMediaType: string = "filterMediaType_example"
    const filterVideoFeed: string = "filterVideoFeed_example"
    const filterAudioFeed: string = "filterAudioFeed_example"
    const filterName: string = "filterName_example"
    const filterNumFrom: string = "filterNumFrom_example"
    const filterNumTo: string = "filterNumTo_example"
    const filterGroupName: string = "filterGroupName_example"
    const filterGroupNumFrom: string = "filterGroupNumFrom_example"
    const filterGroupNumTo: string = "filterGroupNumTo_example"
    const filterRecordAudio: string = "filterRecordAudio_example"
    const filterStartFrom: string = "filterStartFrom_example"
    const filterStartTo: string = "filterStartTo_example"
    const filterEndFrom: string = "filterEndFrom_example"
    const filterEndTo: string = "filterEndTo_example"
    const filterStatus: string = "filterStatus_example"
    const filterSeleniumResult: string = "filterSeleniumResult_example"
    const filterDone: string = "filterDone_example"
    return expect(instance.readAllTestResults(runID, testID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, filterStartFrom, filterStartTo, filterEndFrom, filterEndTo, filterStatus, filterSeleniumResult, filterDone, {})).resolves.toBe(null)
  })
  test("readTestResult", () => {
    const resultID: number = 789
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readTestResult(resultID, runID, testID, projectID, describe, {})).resolves.toBe(null)
  })
  test("readTestResultStatistics", () => {
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readTestResultStatistics(runID, testID, projectID, describe, {})).resolves.toBe(null)
  })
})

describe("RunApi", () => {
  let instance: api.RunApi
  beforeEach(function() {
    instance = new api.RunApi(config)
  });

  test("createTestRun", () => {
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.createTestRun(testID, projectID, describe, {})).resolves.toBe(null)
  })
  test("readAllTestRuns", () => {
    const testID: number = 789
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterTestName: string = "filterTestName_example"
    const filterStartedFrom: string = "filterStartedFrom_example"
    const filterStartedTo: string = "filterStartedTo_example"
    const filterFinishedFrom: string = "filterFinishedFrom_example"
    const filterFinishedTo: string = "filterFinishedTo_example"
    const filterExecutionStartedFrom: string = "filterExecutionStartedFrom_example"
    const filterExecutionStartedTo: string = "filterExecutionStartedTo_example"
    const filterExecutionFinishedFrom: string = "filterExecutionFinishedFrom_example"
    const filterExecutionFinishedTo: string = "filterExecutionFinishedTo_example"
    const filterIncrementStrategy: string = "filterIncrementStrategy_example"
    const filterStatus: string = "filterStatus_example"
    const filterTestMode: string = "filterTestMode_example"
    const filterStartIntervalFrom: string = "filterStartIntervalFrom_example"
    const filterStartIntervalTo: string = "filterStartIntervalTo_example"
    const filterParticipantTimeoutFrom: string = "filterParticipantTimeoutFrom_example"
    const filterParticipantTimeoutTo: string = "filterParticipantTimeoutTo_example"
    const filterActive: string = "filterActive_example"
    return expect(instance.readAllTestRuns(testID, projectID, limit, offset, describe, filterTestName, filterStartedFrom, filterStartedTo, filterFinishedFrom, filterFinishedTo, filterExecutionStartedFrom, filterExecutionStartedTo, filterExecutionFinishedFrom, filterExecutionFinishedTo, filterIncrementStrategy, filterStatus, filterTestMode, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, filterActive, {})).resolves.toBe(null)
  })
  test("readTestRun", () => {
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readTestRun(runID, testID, projectID, describe, {})).resolves.toBe(null)
  })
  test("stopTestRun", () => {
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    return expect(instance.stopTestRun(runID, testID, projectID, {})).resolves.toBe(null)
  })
})

describe("RunparticipantApi", () => {
  let instance: api.RunparticipantApi
  beforeEach(function() {
    instance = new api.RunparticipantApi(config)
  });

  test("readAllTestRunParticipants", () => {
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterBrowser: string = "filterBrowser_example"
    const filterNetwork: string = "filterNetwork_example"
    const filterLocation: string = "filterLocation_example"
    const filterMediaType: string = "filterMediaType_example"
    const filterVideoFeed: string = "filterVideoFeed_example"
    const filterAudioFeed: string = "filterAudioFeed_example"
    const filterName: string = "filterName_example"
    const filterNumFrom: string = "filterNumFrom_example"
    const filterNumTo: string = "filterNumTo_example"
    const filterGroupName: string = "filterGroupName_example"
    const filterGroupNumFrom: string = "filterGroupNumFrom_example"
    const filterGroupNumTo: string = "filterGroupNumTo_example"
    const filterRecordAudio: string = "filterRecordAudio_example"
    return expect(instance.readAllTestRunParticipants(runID, testID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, {})).resolves.toBe(null)
  })
  test("readTestRunParticipant", () => {
    const runParticipantID: number = 789
    const runID: number = 789
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readTestRunParticipant(runParticipantID, runID, testID, projectID, describe, {})).resolves.toBe(null)
  })
})

describe("StaticApi", () => {
  let instance: api.StaticApi
  beforeEach(function() {
    instance = new api.StaticApi(config)
  });

  test("readAllStaticTypes", () => {
    return expect(instance.readAllStaticTypes({})).resolves.toBe(null)
  })
  test("readAllStatics", () => {
    return expect(instance.readAllStatics({})).resolves.toBe(null)
  })
  test("readMetricPath", () => {
    return expect(instance.readMetricPath({})).resolves.toBe(null)
  })
  test("readStaticResource", () => {
    const resource: string = "resource_example"
    return expect(instance.readStaticResource(resource, {})).resolves.toBe(null)
  })
})

describe("TestApi", () => {
  let instance: api.TestApi
  beforeEach(function() {
    instance = new api.TestApi(config)
  });

  test("createTest", () => {
    const name: string = "name_example"
    const startInterval: number = 789
    const participantTimeout: number = 789
    const mode: string = "mode_example"
    const incrementStrategy: string = "incrementStrategy_example"
    const script: string = "script_example"
    const projectID: number = 789
    const describe: string = "describe_example"
    const id: number = 789
    const created: Date = 2013-10-20T19:20:30+01:00
    const updated: Date = 2013-10-20T19:20:30+01:00
    const projectId: number = 789
    const scriptFileId: number = 789
    const deleted: boolean = true
    const groupCount: number = 789
    const participantCount: number = 789
    return expect(instance.createTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, {})).resolves.toBe(null)
  })
  test("deleteTest", () => {
    const testID: number = 789
    const projectID: number = 789
    return expect(instance.deleteTest(testID, projectID, {})).resolves.toBe(null)
  })
  test("duplicateTest", () => {
    const testID: number = 789
    const projectID: number = 789
    const body: api.TestIDCopyBody = undefined
    const describe: string = "describe_example"
    return expect(instance.duplicateTest(testID, projectID, body, describe, {})).resolves.toBe(null)
  })
  test("readAllTests", () => {
    const projectID: number = 789
    const limit: number = 789
    const offset: number = 789
    const describe: string = "describe_example"
    const filterName: string = "filterName_example"
    const filterTestMode: string = "filterTestMode_example"
    const filterIncrementStrategy: string = "filterIncrementStrategy_example"
    const filterStartIntervalFrom: string = "filterStartIntervalFrom_example"
    const filterStartIntervalTo: string = "filterStartIntervalTo_example"
    const filterParticipantTimeoutFrom: string = "filterParticipantTimeoutFrom_example"
    const filterParticipantTimeoutTo: string = "filterParticipantTimeoutTo_example"
    return expect(instance.readAllTests(projectID, limit, offset, describe, filterName, filterTestMode, filterIncrementStrategy, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, {})).resolves.toBe(null)
  })
  test("readTest", () => {
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    return expect(instance.readTest(testID, projectID, describe, {})).resolves.toBe(null)
  })
  test("updateTest", () => {
    const name: string = "name_example"
    const startInterval: number = 789
    const participantTimeout: number = 789
    const mode: string = "mode_example"
    const incrementStrategy: string = "incrementStrategy_example"
    const script: string = "script_example"
    const testID: number = 789
    const projectID: number = 789
    const describe: string = "describe_example"
    const id: number = 789
    const created: Date = 2013-10-20T19:20:30+01:00
    const updated: Date = 2013-10-20T19:20:30+01:00
    const projectId: number = 789
    const scriptFileId: number = 789
    const deleted: boolean = true
    const groupCount: number = 789
    const participantCount: number = 789
    return expect(instance.updateTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, testID, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, {})).resolves.toBe(null)
  })
})

