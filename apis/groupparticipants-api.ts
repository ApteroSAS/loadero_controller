/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { GroupParticipantBody } from '../models';
import { InlineResponse2008 } from '../models';
import { ValidationResponse } from '../models';
/**
 * GroupparticipantsApi - axios parameter creator
 * @export
 */
export const GroupparticipantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new group participant with given properties.
         * @summary Create new group participant.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {GroupParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupParticipant: async (projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling createGroupParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling createGroupParticipant.');
            }
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new RequiredError('groupID','Required parameter groupID was null or undefined when calling createGroupParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes group participant.
         * @summary Delete existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupParticipant: async (participantID: number, projectID: number, testID: number, groupID: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling deleteGroupParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling deleteGroupParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling deleteGroupParticipant.');
            }
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new RequiredError('groupID','Required parameter groupID was null or undefined when calling deleteGroupParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint duplicates given group participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name.
         * @summary Duplicate existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateGroupParticipant: async (participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling duplicateGroupParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling duplicateGroupParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling duplicateGroupParticipant.');
            }
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new RequiredError('groupID','Required parameter groupID was null or undefined when calling duplicateGroupParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/copy/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all group participant info.
         * @summary Get all existing group participants for group.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterCountFrom] 
         * @param {string} [filterCountTo] 
         * @param {string} [filterComputeUnit] 
         * @param {string} [filterHasGroup] 
         * @param {string} [filterRecordAudio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllGroupParticipants: async (projectID: number, testID: number, groupID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readAllGroupParticipants.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readAllGroupParticipants.');
            }
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new RequiredError('groupID','Required parameter groupID was null or undefined when calling readAllGroupParticipants.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (filterBrowser !== undefined) {
                localVarQueryParameter['filter_browser'] = filterBrowser;
            }

            if (filterNetwork !== undefined) {
                localVarQueryParameter['filter_network'] = filterNetwork;
            }

            if (filterLocation !== undefined) {
                localVarQueryParameter['filter_location'] = filterLocation;
            }

            if (filterMediaType !== undefined) {
                localVarQueryParameter['filter_media_type'] = filterMediaType;
            }

            if (filterVideoFeed !== undefined) {
                localVarQueryParameter['filter_video_feed'] = filterVideoFeed;
            }

            if (filterAudioFeed !== undefined) {
                localVarQueryParameter['filter_audio_feed'] = filterAudioFeed;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter_name'] = filterName;
            }

            if (filterCountFrom !== undefined) {
                localVarQueryParameter['filter_count_from'] = filterCountFrom;
            }

            if (filterCountTo !== undefined) {
                localVarQueryParameter['filter_count_to'] = filterCountTo;
            }

            if (filterComputeUnit !== undefined) {
                localVarQueryParameter['filter_compute_unit'] = filterComputeUnit;
            }

            if (filterHasGroup !== undefined) {
                localVarQueryParameter['filter_has_group'] = filterHasGroup;
            }

            if (filterRecordAudio !== undefined) {
                localVarQueryParameter['filter_record_audio'] = filterRecordAudio;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves group participant info.
         * @summary Get existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readGroupParticipant: async (participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling readGroupParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readGroupParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readGroupParticipant.');
            }
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new RequiredError('groupID','Required parameter groupID was null or undefined when calling readGroupParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates group participant with given properties.
         * @summary Update existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {GroupParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupParticipant: async (participantID: number, projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling updateGroupParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling updateGroupParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling updateGroupParticipant.');
            }
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new RequiredError('groupID','Required parameter groupID was null or undefined when calling updateGroupParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/groups/{groupID}/participants/{participantID}/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupparticipantsApi - functional programming interface
 * @export
 */
export const GroupparticipantsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new group participant with given properties.
         * @summary Create new group participant.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {GroupParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupParticipant(projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupParticipantBody>> {
            const localVarAxiosArgs = await GroupparticipantsApiAxiosParamCreator(configuration).createGroupParticipant(projectID, testID, groupID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint deletes group participant.
         * @summary Delete existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await GroupparticipantsApiAxiosParamCreator(configuration).deleteGroupParticipant(participantID, projectID, testID, groupID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint duplicates given group participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name.
         * @summary Duplicate existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupParticipantBody>> {
            const localVarAxiosArgs = await GroupparticipantsApiAxiosParamCreator(configuration).duplicateGroupParticipant(participantID, projectID, testID, groupID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all group participant info.
         * @summary Get all existing group participants for group.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterCountFrom] 
         * @param {string} [filterCountTo] 
         * @param {string} [filterComputeUnit] 
         * @param {string} [filterHasGroup] 
         * @param {string} [filterRecordAudio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllGroupParticipants(projectID: number, testID: number, groupID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await GroupparticipantsApiAxiosParamCreator(configuration).readAllGroupParticipants(projectID, testID, groupID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves group participant info.
         * @summary Get existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupParticipantBody>> {
            const localVarAxiosArgs = await GroupparticipantsApiAxiosParamCreator(configuration).readGroupParticipant(participantID, projectID, testID, groupID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint updates group participant with given properties.
         * @summary Update existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {GroupParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupParticipantBody>> {
            const localVarAxiosArgs = await GroupparticipantsApiAxiosParamCreator(configuration).updateGroupParticipant(participantID, projectID, testID, groupID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupparticipantsApi - factory interface
 * @export
 */
export const GroupparticipantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint creates new group participant with given properties.
         * @summary Create new group participant.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {GroupParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupParticipant(projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options?: any): AxiosPromise<GroupParticipantBody> {
            return GroupparticipantsApiFp(configuration).createGroupParticipant(projectID, testID, groupID, body, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes group participant.
         * @summary Delete existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, options?: any): AxiosPromise<void> {
            return GroupparticipantsApiFp(configuration).deleteGroupParticipant(participantID, projectID, testID, groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint duplicates given group participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name.
         * @summary Duplicate existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options?: any): AxiosPromise<GroupParticipantBody> {
            return GroupparticipantsApiFp(configuration).duplicateGroupParticipant(participantID, projectID, testID, groupID, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all group participant info.
         * @summary Get all existing group participants for group.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterCountFrom] 
         * @param {string} [filterCountTo] 
         * @param {string} [filterComputeUnit] 
         * @param {string} [filterHasGroup] 
         * @param {string} [filterRecordAudio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllGroupParticipants(projectID: number, testID: number, groupID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options?: any): AxiosPromise<InlineResponse2008> {
            return GroupparticipantsApiFp(configuration).readAllGroupParticipants(projectID, testID, groupID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves group participant info.
         * @summary Get existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options?: any): AxiosPromise<GroupParticipantBody> {
            return GroupparticipantsApiFp(configuration).readGroupParticipant(participantID, projectID, testID, groupID, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates group participant with given properties.
         * @summary Update existing group participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} groupID 
         * @param {GroupParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options?: any): AxiosPromise<GroupParticipantBody> {
            return GroupparticipantsApiFp(configuration).updateGroupParticipant(participantID, projectID, testID, groupID, body, describe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupparticipantsApi - object-oriented interface
 * @export
 * @class GroupparticipantsApi
 * @extends {BaseAPI}
 */
export class GroupparticipantsApi extends BaseAPI {
    /**
     * This endpoint creates new group participant with given properties.
     * @summary Create new group participant.
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} groupID 
     * @param {GroupParticipantBody} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupparticipantsApi
     */
    public createGroupParticipant(projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options?: any) {
        return GroupparticipantsApiFp(this.configuration).createGroupParticipant(projectID, testID, groupID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint deletes group participant.
     * @summary Delete existing group participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} groupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupparticipantsApi
     */
    public deleteGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, options?: any) {
        return GroupparticipantsApiFp(this.configuration).deleteGroupParticipant(participantID, projectID, testID, groupID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint duplicates given group participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name.
     * @summary Duplicate existing group participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} groupID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupparticipantsApi
     */
    public duplicateGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options?: any) {
        return GroupparticipantsApiFp(this.configuration).duplicateGroupParticipant(participantID, projectID, testID, groupID, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all group participant info.
     * @summary Get all existing group participants for group.
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} groupID 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [describe] 
     * @param {string} [filterBrowser] 
     * @param {string} [filterNetwork] 
     * @param {string} [filterLocation] 
     * @param {string} [filterMediaType] 
     * @param {string} [filterVideoFeed] 
     * @param {string} [filterAudioFeed] 
     * @param {string} [filterName] 
     * @param {string} [filterCountFrom] 
     * @param {string} [filterCountTo] 
     * @param {string} [filterComputeUnit] 
     * @param {string} [filterHasGroup] 
     * @param {string} [filterRecordAudio] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupparticipantsApi
     */
    public readAllGroupParticipants(projectID: number, testID: number, groupID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options?: any) {
        return GroupparticipantsApiFp(this.configuration).readAllGroupParticipants(projectID, testID, groupID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves group participant info.
     * @summary Get existing group participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} groupID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupparticipantsApi
     */
    public readGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, describe?: string, options?: any) {
        return GroupparticipantsApiFp(this.configuration).readGroupParticipant(participantID, projectID, testID, groupID, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint updates group participant with given properties.
     * @summary Update existing group participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} groupID 
     * @param {GroupParticipantBody} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupparticipantsApi
     */
    public updateGroupParticipant(participantID: number, projectID: number, testID: number, groupID: number, body?: GroupParticipantBody, describe?: string, options?: any) {
        return GroupparticipantsApiFp(this.configuration).updateGroupParticipant(participantID, projectID, testID, groupID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
}
