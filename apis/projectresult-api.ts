/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { ExtendedResult } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
/**
 * ProjectresultApi - axios parameter creator
 * @export
 */
export const ProjectresultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all project run results. Project, run must be previously created and run has to be finished in order to get results
         * @summary Read all project run results
         * @param {number} runID 
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterNumFrom] 
         * @param {string} [filterNumTo] 
         * @param {string} [filterGroupName] 
         * @param {string} [filterGroupNumFrom] 
         * @param {string} [filterGroupNumTo] 
         * @param {string} [filterRecordAudio] 
         * @param {string} [filterStartFrom] 
         * @param {string} [filterStartTo] 
         * @param {string} [filterEndFrom] 
         * @param {string} [filterEndTo] 
         * @param {string} [filterStatus] 
         * @param {string} [filterSeleniumResult] 
         * @param {string} [filterDone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllProjectResults: async (runID: number, projectID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterNumFrom?: string, filterNumTo?: string, filterGroupName?: string, filterGroupNumFrom?: string, filterGroupNumTo?: string, filterRecordAudio?: string, filterStartFrom?: string, filterStartTo?: string, filterEndFrom?: string, filterEndTo?: string, filterStatus?: string, filterSeleniumResult?: string, filterDone?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'runID' is not null or undefined
            if (runID === null || runID === undefined) {
                throw new RequiredError('runID','Required parameter runID was null or undefined when calling readAllProjectResults.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readAllProjectResults.');
            }
            const localVarPath = `/projects/{projectID}/runs/{runID}/results/`
                .replace(`{${"runID"}}`, encodeURIComponent(String(runID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (filterBrowser !== undefined) {
                localVarQueryParameter['filter_browser'] = filterBrowser;
            }

            if (filterNetwork !== undefined) {
                localVarQueryParameter['filter_network'] = filterNetwork;
            }

            if (filterLocation !== undefined) {
                localVarQueryParameter['filter_location'] = filterLocation;
            }

            if (filterMediaType !== undefined) {
                localVarQueryParameter['filter_media_type'] = filterMediaType;
            }

            if (filterVideoFeed !== undefined) {
                localVarQueryParameter['filter_video_feed'] = filterVideoFeed;
            }

            if (filterAudioFeed !== undefined) {
                localVarQueryParameter['filter_audio_feed'] = filterAudioFeed;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter_name'] = filterName;
            }

            if (filterNumFrom !== undefined) {
                localVarQueryParameter['filter_num_from'] = filterNumFrom;
            }

            if (filterNumTo !== undefined) {
                localVarQueryParameter['filter_num_to'] = filterNumTo;
            }

            if (filterGroupName !== undefined) {
                localVarQueryParameter['filter_group_name'] = filterGroupName;
            }

            if (filterGroupNumFrom !== undefined) {
                localVarQueryParameter['filter_group_num_from'] = filterGroupNumFrom;
            }

            if (filterGroupNumTo !== undefined) {
                localVarQueryParameter['filter_group_num_to'] = filterGroupNumTo;
            }

            if (filterRecordAudio !== undefined) {
                localVarQueryParameter['filter_record_audio'] = filterRecordAudio;
            }

            if (filterStartFrom !== undefined) {
                localVarQueryParameter['filter_start_from'] = filterStartFrom;
            }

            if (filterStartTo !== undefined) {
                localVarQueryParameter['filter_start_to'] = filterStartTo;
            }

            if (filterEndFrom !== undefined) {
                localVarQueryParameter['filter_end_from'] = filterEndFrom;
            }

            if (filterEndTo !== undefined) {
                localVarQueryParameter['filter_end_to'] = filterEndTo;
            }

            if (filterStatus !== undefined) {
                localVarQueryParameter['filter_status'] = filterStatus;
            }

            if (filterSeleniumResult !== undefined) {
                localVarQueryParameter['filter_selenium_result'] = filterSeleniumResult;
            }

            if (filterDone !== undefined) {
                localVarQueryParameter['filter_done'] = filterDone;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves single project run result info. Project, run and result must be previously created
         * @summary Read single project run result
         * @param {number} resultID 
         * @param {number} runID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProjectResult: async (resultID: number, runID: number, projectID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultID' is not null or undefined
            if (resultID === null || resultID === undefined) {
                throw new RequiredError('resultID','Required parameter resultID was null or undefined when calling readProjectResult.');
            }
            // verify required parameter 'runID' is not null or undefined
            if (runID === null || runID === undefined) {
                throw new RequiredError('runID','Required parameter runID was null or undefined when calling readProjectResult.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readProjectResult.');
            }
            const localVarPath = `/projects/{projectID}/runs/{runID}/results/{resultID}/`
                .replace(`{${"resultID"}}`, encodeURIComponent(String(resultID)))
                .replace(`{${"runID"}}`, encodeURIComponent(String(runID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all project result statisctics. Project and run must be previously created
         * @summary Read all project result statistics
         * @param {number} runID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProjectResultStatistics: async (runID: number, projectID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'runID' is not null or undefined
            if (runID === null || runID === undefined) {
                throw new RequiredError('runID','Required parameter runID was null or undefined when calling readProjectResultStatistics.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readProjectResultStatistics.');
            }
            const localVarPath = `/projects/{projectID}/runs/{runID}/results/statistics/`
                .replace(`{${"runID"}}`, encodeURIComponent(String(runID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectresultApi - functional programming interface
 * @export
 */
export const ProjectresultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all project run results. Project, run must be previously created and run has to be finished in order to get results
         * @summary Read all project run results
         * @param {number} runID 
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterNumFrom] 
         * @param {string} [filterNumTo] 
         * @param {string} [filterGroupName] 
         * @param {string} [filterGroupNumFrom] 
         * @param {string} [filterGroupNumTo] 
         * @param {string} [filterRecordAudio] 
         * @param {string} [filterStartFrom] 
         * @param {string} [filterStartTo] 
         * @param {string} [filterEndFrom] 
         * @param {string} [filterEndTo] 
         * @param {string} [filterStatus] 
         * @param {string} [filterSeleniumResult] 
         * @param {string} [filterDone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllProjectResults(runID: number, projectID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterNumFrom?: string, filterNumTo?: string, filterGroupName?: string, filterGroupNumFrom?: string, filterGroupNumTo?: string, filterRecordAudio?: string, filterStartFrom?: string, filterStartTo?: string, filterEndFrom?: string, filterEndTo?: string, filterStatus?: string, filterSeleniumResult?: string, filterDone?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await ProjectresultApiAxiosParamCreator(configuration).readAllProjectResults(runID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, filterStartFrom, filterStartTo, filterEndFrom, filterEndTo, filterStatus, filterSeleniumResult, filterDone, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves single project run result info. Project, run and result must be previously created
         * @summary Read single project run result
         * @param {number} resultID 
         * @param {number} runID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProjectResult(resultID: number, runID: number, projectID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtendedResult>> {
            const localVarAxiosArgs = await ProjectresultApiAxiosParamCreator(configuration).readProjectResult(resultID, runID, projectID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all project result statisctics. Project and run must be previously created
         * @summary Read all project result statistics
         * @param {number} runID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProjectResultStatistics(runID: number, projectID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await ProjectresultApiAxiosParamCreator(configuration).readProjectResultStatistics(runID, projectID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectresultApi - factory interface
 * @export
 */
export const ProjectresultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint retrieves all project run results. Project, run must be previously created and run has to be finished in order to get results
         * @summary Read all project run results
         * @param {number} runID 
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterNumFrom] 
         * @param {string} [filterNumTo] 
         * @param {string} [filterGroupName] 
         * @param {string} [filterGroupNumFrom] 
         * @param {string} [filterGroupNumTo] 
         * @param {string} [filterRecordAudio] 
         * @param {string} [filterStartFrom] 
         * @param {string} [filterStartTo] 
         * @param {string} [filterEndFrom] 
         * @param {string} [filterEndTo] 
         * @param {string} [filterStatus] 
         * @param {string} [filterSeleniumResult] 
         * @param {string} [filterDone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllProjectResults(runID: number, projectID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterNumFrom?: string, filterNumTo?: string, filterGroupName?: string, filterGroupNumFrom?: string, filterGroupNumTo?: string, filterRecordAudio?: string, filterStartFrom?: string, filterStartTo?: string, filterEndFrom?: string, filterEndTo?: string, filterStatus?: string, filterSeleniumResult?: string, filterDone?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return ProjectresultApiFp(configuration).readAllProjectResults(runID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, filterStartFrom, filterStartTo, filterEndFrom, filterEndTo, filterStatus, filterSeleniumResult, filterDone, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves single project run result info. Project, run and result must be previously created
         * @summary Read single project run result
         * @param {number} resultID 
         * @param {number} runID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProjectResult(resultID: number, runID: number, projectID: number, describe?: string, options?: any): AxiosPromise<ExtendedResult> {
            return ProjectresultApiFp(configuration).readProjectResult(resultID, runID, projectID, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all project result statisctics. Project and run must be previously created
         * @summary Read all project result statistics
         * @param {number} runID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProjectResultStatistics(runID: number, projectID: number, describe?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return ProjectresultApiFp(configuration).readProjectResultStatistics(runID, projectID, describe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectresultApi - object-oriented interface
 * @export
 * @class ProjectresultApi
 * @extends {BaseAPI}
 */
export class ProjectresultApi extends BaseAPI {
    /**
     * This endpoint retrieves all project run results. Project, run must be previously created and run has to be finished in order to get results
     * @summary Read all project run results
     * @param {number} runID 
     * @param {number} projectID 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [describe] 
     * @param {string} [filterBrowser] 
     * @param {string} [filterNetwork] 
     * @param {string} [filterLocation] 
     * @param {string} [filterMediaType] 
     * @param {string} [filterVideoFeed] 
     * @param {string} [filterAudioFeed] 
     * @param {string} [filterName] 
     * @param {string} [filterNumFrom] 
     * @param {string} [filterNumTo] 
     * @param {string} [filterGroupName] 
     * @param {string} [filterGroupNumFrom] 
     * @param {string} [filterGroupNumTo] 
     * @param {string} [filterRecordAudio] 
     * @param {string} [filterStartFrom] 
     * @param {string} [filterStartTo] 
     * @param {string} [filterEndFrom] 
     * @param {string} [filterEndTo] 
     * @param {string} [filterStatus] 
     * @param {string} [filterSeleniumResult] 
     * @param {string} [filterDone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectresultApi
     */
    public readAllProjectResults(runID: number, projectID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterNumFrom?: string, filterNumTo?: string, filterGroupName?: string, filterGroupNumFrom?: string, filterGroupNumTo?: string, filterRecordAudio?: string, filterStartFrom?: string, filterStartTo?: string, filterEndFrom?: string, filterEndTo?: string, filterStatus?: string, filterSeleniumResult?: string, filterDone?: string, options?: any) {
        return ProjectresultApiFp(this.configuration).readAllProjectResults(runID, projectID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterNumFrom, filterNumTo, filterGroupName, filterGroupNumFrom, filterGroupNumTo, filterRecordAudio, filterStartFrom, filterStartTo, filterEndFrom, filterEndTo, filterStatus, filterSeleniumResult, filterDone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves single project run result info. Project, run and result must be previously created
     * @summary Read single project run result
     * @param {number} resultID 
     * @param {number} runID 
     * @param {number} projectID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectresultApi
     */
    public readProjectResult(resultID: number, runID: number, projectID: number, describe?: string, options?: any) {
        return ProjectresultApiFp(this.configuration).readProjectResult(resultID, runID, projectID, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all project result statisctics. Project and run must be previously created
     * @summary Read all project result statistics
     * @param {number} runID 
     * @param {number} projectID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectresultApi
     */
    public readProjectResultStatistics(runID: number, projectID: number, describe?: string, options?: any) {
        return ProjectresultApiFp(this.configuration).readProjectResultStatistics(runID, projectID, describe, options).then((request) => request(this.axios, this.basePath));
    }
}
