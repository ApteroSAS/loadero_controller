/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { InlineResponse2008 } from '../models';
import { ParticipantBody } from '../models';
import { ParticipantIDCopyBody } from '../models';
import { ValidationResponse } from '../models';
/**
 * ParticipantsApi - axios parameter creator
 * @export
 */
export const ParticipantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new participant with given properties.
         * @summary Create new participant.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParticipant: async (projectID: number, testID: number, body?: ParticipantBody, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling createParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling createParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/participants/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes participant.
         * @summary Delete existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParticipant: async (participantID: number, projectID: number, testID: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling deleteParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling deleteParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling deleteParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/participants/{participantID}/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint duplicates given participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name. Group and participant must be previously created.
         * @summary Duplicate existing participant
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantIDCopyBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateParticipant: async (participantID: number, projectID: number, testID: number, body?: ParticipantIDCopyBody, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling duplicateParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling duplicateParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling duplicateParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/participants/{participantID}/copy/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all participant info.
         * @summary Get all existing participants for test.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterCountFrom] 
         * @param {string} [filterCountTo] 
         * @param {string} [filterComputeUnit] 
         * @param {string} [filterHasGroup] 
         * @param {string} [filterRecordAudio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllParticipants: async (projectID: number, testID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readAllParticipants.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readAllParticipants.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/participants/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (filterBrowser !== undefined) {
                localVarQueryParameter['filter_browser'] = filterBrowser;
            }

            if (filterNetwork !== undefined) {
                localVarQueryParameter['filter_network'] = filterNetwork;
            }

            if (filterLocation !== undefined) {
                localVarQueryParameter['filter_location'] = filterLocation;
            }

            if (filterMediaType !== undefined) {
                localVarQueryParameter['filter_media_type'] = filterMediaType;
            }

            if (filterVideoFeed !== undefined) {
                localVarQueryParameter['filter_video_feed'] = filterVideoFeed;
            }

            if (filterAudioFeed !== undefined) {
                localVarQueryParameter['filter_audio_feed'] = filterAudioFeed;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter_name'] = filterName;
            }

            if (filterCountFrom !== undefined) {
                localVarQueryParameter['filter_count_from'] = filterCountFrom;
            }

            if (filterCountTo !== undefined) {
                localVarQueryParameter['filter_count_to'] = filterCountTo;
            }

            if (filterComputeUnit !== undefined) {
                localVarQueryParameter['filter_compute_unit'] = filterComputeUnit;
            }

            if (filterHasGroup !== undefined) {
                localVarQueryParameter['filter_has_group'] = filterHasGroup;
            }

            if (filterRecordAudio !== undefined) {
                localVarQueryParameter['filter_record_audio'] = filterRecordAudio;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves participant info.
         * @summary Get existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParticipant: async (participantID: number, projectID: number, testID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling readParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/participants/{participantID}/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates participant with given properties.
         * @summary Update existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant: async (participantID: number, projectID: number, testID: number, body?: ParticipantBody, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantID' is not null or undefined
            if (participantID === null || participantID === undefined) {
                throw new RequiredError('participantID','Required parameter participantID was null or undefined when calling updateParticipant.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling updateParticipant.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling updateParticipant.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/participants/{participantID}/`
                .replace(`{${"participantID"}}`, encodeURIComponent(String(participantID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParticipantsApi - functional programming interface
 * @export
 */
export const ParticipantsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new participant with given properties.
         * @summary Create new participant.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParticipant(projectID: number, testID: number, body?: ParticipantBody, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantBody>> {
            const localVarAxiosArgs = await ParticipantsApiAxiosParamCreator(configuration).createParticipant(projectID, testID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint deletes participant.
         * @summary Delete existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParticipant(participantID: number, projectID: number, testID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ParticipantsApiAxiosParamCreator(configuration).deleteParticipant(participantID, projectID, testID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint duplicates given participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name. Group and participant must be previously created.
         * @summary Duplicate existing participant
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantIDCopyBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateParticipant(participantID: number, projectID: number, testID: number, body?: ParticipantIDCopyBody, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantBody>> {
            const localVarAxiosArgs = await ParticipantsApiAxiosParamCreator(configuration).duplicateParticipant(participantID, projectID, testID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all participant info.
         * @summary Get all existing participants for test.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterCountFrom] 
         * @param {string} [filterCountTo] 
         * @param {string} [filterComputeUnit] 
         * @param {string} [filterHasGroup] 
         * @param {string} [filterRecordAudio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllParticipants(projectID: number, testID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await ParticipantsApiAxiosParamCreator(configuration).readAllParticipants(projectID, testID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves participant info.
         * @summary Get existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readParticipant(participantID: number, projectID: number, testID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantBody>> {
            const localVarAxiosArgs = await ParticipantsApiAxiosParamCreator(configuration).readParticipant(participantID, projectID, testID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint updates participant with given properties.
         * @summary Update existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParticipant(participantID: number, projectID: number, testID: number, body?: ParticipantBody, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantBody>> {
            const localVarAxiosArgs = await ParticipantsApiAxiosParamCreator(configuration).updateParticipant(participantID, projectID, testID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ParticipantsApi - factory interface
 * @export
 */
export const ParticipantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint creates new participant with given properties.
         * @summary Create new participant.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParticipant(projectID: number, testID: number, body?: ParticipantBody, describe?: string, options?: any): AxiosPromise<ParticipantBody> {
            return ParticipantsApiFp(configuration).createParticipant(projectID, testID, body, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes participant.
         * @summary Delete existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParticipant(participantID: number, projectID: number, testID: number, options?: any): AxiosPromise<void> {
            return ParticipantsApiFp(configuration).deleteParticipant(participantID, projectID, testID, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint duplicates given participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name. Group and participant must be previously created.
         * @summary Duplicate existing participant
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantIDCopyBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateParticipant(participantID: number, projectID: number, testID: number, body?: ParticipantIDCopyBody, describe?: string, options?: any): AxiosPromise<ParticipantBody> {
            return ParticipantsApiFp(configuration).duplicateParticipant(participantID, projectID, testID, body, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all participant info.
         * @summary Get all existing participants for test.
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterBrowser] 
         * @param {string} [filterNetwork] 
         * @param {string} [filterLocation] 
         * @param {string} [filterMediaType] 
         * @param {string} [filterVideoFeed] 
         * @param {string} [filterAudioFeed] 
         * @param {string} [filterName] 
         * @param {string} [filterCountFrom] 
         * @param {string} [filterCountTo] 
         * @param {string} [filterComputeUnit] 
         * @param {string} [filterHasGroup] 
         * @param {string} [filterRecordAudio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllParticipants(projectID: number, testID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options?: any): AxiosPromise<InlineResponse2008> {
            return ParticipantsApiFp(configuration).readAllParticipants(projectID, testID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves participant info.
         * @summary Get existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParticipant(participantID: number, projectID: number, testID: number, describe?: string, options?: any): AxiosPromise<ParticipantBody> {
            return ParticipantsApiFp(configuration).readParticipant(participantID, projectID, testID, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates participant with given properties.
         * @summary Update existing participant.
         * @param {number} participantID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {ParticipantBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant(participantID: number, projectID: number, testID: number, body?: ParticipantBody, describe?: string, options?: any): AxiosPromise<ParticipantBody> {
            return ParticipantsApiFp(configuration).updateParticipant(participantID, projectID, testID, body, describe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParticipantsApi - object-oriented interface
 * @export
 * @class ParticipantsApi
 * @extends {BaseAPI}
 */
export class ParticipantsApi extends BaseAPI {
    /**
     * This endpoint creates new participant with given properties.
     * @summary Create new participant.
     * @param {number} projectID 
     * @param {number} testID 
     * @param {ParticipantBody} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public createParticipant(projectID: number, testID: number, body?: ParticipantBody, describe?: string, options?: any) {
        return ParticipantsApiFp(this.configuration).createParticipant(projectID, testID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint deletes participant.
     * @summary Delete existing participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public deleteParticipant(participantID: number, projectID: number, testID: number, options?: any) {
        return ParticipantsApiFp(this.configuration).deleteParticipant(participantID, projectID, testID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint duplicates given participant. If no copy name is provided an \"Copy of\" prefix will be applied to the participant name. Group and participant must be previously created.
     * @summary Duplicate existing participant
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {ParticipantIDCopyBody} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public duplicateParticipant(participantID: number, projectID: number, testID: number, body?: ParticipantIDCopyBody, describe?: string, options?: any) {
        return ParticipantsApiFp(this.configuration).duplicateParticipant(participantID, projectID, testID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all participant info.
     * @summary Get all existing participants for test.
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [describe] 
     * @param {string} [filterBrowser] 
     * @param {string} [filterNetwork] 
     * @param {string} [filterLocation] 
     * @param {string} [filterMediaType] 
     * @param {string} [filterVideoFeed] 
     * @param {string} [filterAudioFeed] 
     * @param {string} [filterName] 
     * @param {string} [filterCountFrom] 
     * @param {string} [filterCountTo] 
     * @param {string} [filterComputeUnit] 
     * @param {string} [filterHasGroup] 
     * @param {string} [filterRecordAudio] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public readAllParticipants(projectID: number, testID: number, limit?: number, offset?: number, describe?: string, filterBrowser?: string, filterNetwork?: string, filterLocation?: string, filterMediaType?: string, filterVideoFeed?: string, filterAudioFeed?: string, filterName?: string, filterCountFrom?: string, filterCountTo?: string, filterComputeUnit?: string, filterHasGroup?: string, filterRecordAudio?: string, options?: any) {
        return ParticipantsApiFp(this.configuration).readAllParticipants(projectID, testID, limit, offset, describe, filterBrowser, filterNetwork, filterLocation, filterMediaType, filterVideoFeed, filterAudioFeed, filterName, filterCountFrom, filterCountTo, filterComputeUnit, filterHasGroup, filterRecordAudio, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves participant info.
     * @summary Get existing participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public readParticipant(participantID: number, projectID: number, testID: number, describe?: string, options?: any) {
        return ParticipantsApiFp(this.configuration).readParticipant(participantID, projectID, testID, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint updates participant with given properties.
     * @summary Update existing participant.
     * @param {number} participantID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {ParticipantBody} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public updateParticipant(participantID: number, projectID: number, testID: number, body?: ParticipantBody, describe?: string, options?: any) {
        return ParticipantsApiFp(this.configuration).updateParticipant(participantID, projectID, testID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
}
