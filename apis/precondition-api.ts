/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AssertPrecondition } from '../models';
import { ErrorResponse } from '../models';
import { InlineResponse2006 } from '../models';
import { ValidationResponse } from '../models';
/**
 * PreconditionApi - axios parameter creator
 * @export
 */
export const PreconditionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new assert precondition with given data.
         * @summary Create new assert precondition
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {AssertPrecondition} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrecondition: async (projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling createPrecondition.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling createPrecondition.');
            }
            // verify required parameter 'assertID' is not null or undefined
            if (assertID === null || assertID === undefined) {
                throw new RequiredError('assertID','Required parameter assertID was null or undefined when calling createPrecondition.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"assertID"}}`, encodeURIComponent(String(assertID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes assert precondition. Assert and precondition must be previously created
         * @summary Delete existing assert precondition
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrecondition: async (preconditionID: number, projectID: number, testID: number, assertID: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'preconditionID' is not null or undefined
            if (preconditionID === null || preconditionID === undefined) {
                throw new RequiredError('preconditionID','Required parameter preconditionID was null or undefined when calling deletePrecondition.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling deletePrecondition.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling deletePrecondition.');
            }
            // verify required parameter 'assertID' is not null or undefined
            if (assertID === null || assertID === undefined) {
                throw new RequiredError('assertID','Required parameter assertID was null or undefined when calling deletePrecondition.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/{preconditionID}/`
                .replace(`{${"preconditionID"}}`, encodeURIComponent(String(preconditionID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"assertID"}}`, encodeURIComponent(String(assertID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all assert precodndition info. Assert must be previously created
         * @summary Get all existing assert preconditions for assert
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterProperty] 
         * @param {string} [filterOperator] 
         * @param {string} [filterExpected] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllPreconditions: async (projectID: number, testID: number, assertID: number, limit?: number, offset?: number, describe?: string, filterProperty?: string, filterOperator?: string, filterExpected?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readAllPreconditions.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readAllPreconditions.');
            }
            // verify required parameter 'assertID' is not null or undefined
            if (assertID === null || assertID === undefined) {
                throw new RequiredError('assertID','Required parameter assertID was null or undefined when calling readAllPreconditions.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"assertID"}}`, encodeURIComponent(String(assertID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (filterProperty !== undefined) {
                localVarQueryParameter['filter_property'] = filterProperty;
            }

            if (filterOperator !== undefined) {
                localVarQueryParameter['filter_operator'] = filterOperator;
            }

            if (filterExpected !== undefined) {
                localVarQueryParameter['filter_expected'] = filterExpected;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves assert precondition info. Assert and precondition must be previously created
         * @summary Read assert precondition info
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPrecondition: async (preconditionID: number, projectID: number, testID: number, assertID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'preconditionID' is not null or undefined
            if (preconditionID === null || preconditionID === undefined) {
                throw new RequiredError('preconditionID','Required parameter preconditionID was null or undefined when calling readPrecondition.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readPrecondition.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readPrecondition.');
            }
            // verify required parameter 'assertID' is not null or undefined
            if (assertID === null || assertID === undefined) {
                throw new RequiredError('assertID','Required parameter assertID was null or undefined when calling readPrecondition.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/{preconditionID}/`
                .replace(`{${"preconditionID"}}`, encodeURIComponent(String(preconditionID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"assertID"}}`, encodeURIComponent(String(assertID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates assert precondition with given properties. Assert and precondition must be previously created
         * @summary Update existing assert precondition
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {AssertPrecondition} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrecondition: async (preconditionID: number, projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'preconditionID' is not null or undefined
            if (preconditionID === null || preconditionID === undefined) {
                throw new RequiredError('preconditionID','Required parameter preconditionID was null or undefined when calling updatePrecondition.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling updatePrecondition.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling updatePrecondition.');
            }
            // verify required parameter 'assertID' is not null or undefined
            if (assertID === null || assertID === undefined) {
                throw new RequiredError('assertID','Required parameter assertID was null or undefined when calling updatePrecondition.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/asserts/{assertID}/preconditions/{preconditionID}/`
                .replace(`{${"preconditionID"}}`, encodeURIComponent(String(preconditionID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"assertID"}}`, encodeURIComponent(String(assertID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreconditionApi - functional programming interface
 * @export
 */
export const PreconditionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new assert precondition with given data.
         * @summary Create new assert precondition
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {AssertPrecondition} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrecondition(projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssertPrecondition>> {
            const localVarAxiosArgs = await PreconditionApiAxiosParamCreator(configuration).createPrecondition(projectID, testID, assertID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint deletes assert precondition. Assert and precondition must be previously created
         * @summary Delete existing assert precondition
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PreconditionApiAxiosParamCreator(configuration).deletePrecondition(preconditionID, projectID, testID, assertID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all assert precodndition info. Assert must be previously created
         * @summary Get all existing assert preconditions for assert
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterProperty] 
         * @param {string} [filterOperator] 
         * @param {string} [filterExpected] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllPreconditions(projectID: number, testID: number, assertID: number, limit?: number, offset?: number, describe?: string, filterProperty?: string, filterOperator?: string, filterExpected?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await PreconditionApiAxiosParamCreator(configuration).readAllPreconditions(projectID, testID, assertID, limit, offset, describe, filterProperty, filterOperator, filterExpected, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves assert precondition info. Assert and precondition must be previously created
         * @summary Read assert precondition info
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssertPrecondition>> {
            const localVarAxiosArgs = await PreconditionApiAxiosParamCreator(configuration).readPrecondition(preconditionID, projectID, testID, assertID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint updates assert precondition with given properties. Assert and precondition must be previously created
         * @summary Update existing assert precondition
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {AssertPrecondition} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssertPrecondition>> {
            const localVarAxiosArgs = await PreconditionApiAxiosParamCreator(configuration).updatePrecondition(preconditionID, projectID, testID, assertID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PreconditionApi - factory interface
 * @export
 */
export const PreconditionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint creates new assert precondition with given data.
         * @summary Create new assert precondition
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {AssertPrecondition} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrecondition(projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options?: any): AxiosPromise<AssertPrecondition> {
            return PreconditionApiFp(configuration).createPrecondition(projectID, testID, assertID, body, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes assert precondition. Assert and precondition must be previously created
         * @summary Delete existing assert precondition
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, options?: any): AxiosPromise<void> {
            return PreconditionApiFp(configuration).deletePrecondition(preconditionID, projectID, testID, assertID, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all assert precodndition info. Assert must be previously created
         * @summary Get all existing assert preconditions for assert
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterProperty] 
         * @param {string} [filterOperator] 
         * @param {string} [filterExpected] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllPreconditions(projectID: number, testID: number, assertID: number, limit?: number, offset?: number, describe?: string, filterProperty?: string, filterOperator?: string, filterExpected?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return PreconditionApiFp(configuration).readAllPreconditions(projectID, testID, assertID, limit, offset, describe, filterProperty, filterOperator, filterExpected, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves assert precondition info. Assert and precondition must be previously created
         * @summary Read assert precondition info
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, describe?: string, options?: any): AxiosPromise<AssertPrecondition> {
            return PreconditionApiFp(configuration).readPrecondition(preconditionID, projectID, testID, assertID, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates assert precondition with given properties. Assert and precondition must be previously created
         * @summary Update existing assert precondition
         * @param {number} preconditionID 
         * @param {number} projectID 
         * @param {number} testID 
         * @param {number} assertID 
         * @param {AssertPrecondition} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options?: any): AxiosPromise<AssertPrecondition> {
            return PreconditionApiFp(configuration).updatePrecondition(preconditionID, projectID, testID, assertID, body, describe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PreconditionApi - object-oriented interface
 * @export
 * @class PreconditionApi
 * @extends {BaseAPI}
 */
export class PreconditionApi extends BaseAPI {
    /**
     * This endpoint creates new assert precondition with given data.
     * @summary Create new assert precondition
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} assertID 
     * @param {AssertPrecondition} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreconditionApi
     */
    public createPrecondition(projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options?: any) {
        return PreconditionApiFp(this.configuration).createPrecondition(projectID, testID, assertID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint deletes assert precondition. Assert and precondition must be previously created
     * @summary Delete existing assert precondition
     * @param {number} preconditionID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} assertID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreconditionApi
     */
    public deletePrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, options?: any) {
        return PreconditionApiFp(this.configuration).deletePrecondition(preconditionID, projectID, testID, assertID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all assert precodndition info. Assert must be previously created
     * @summary Get all existing assert preconditions for assert
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} assertID 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [describe] 
     * @param {string} [filterProperty] 
     * @param {string} [filterOperator] 
     * @param {string} [filterExpected] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreconditionApi
     */
    public readAllPreconditions(projectID: number, testID: number, assertID: number, limit?: number, offset?: number, describe?: string, filterProperty?: string, filterOperator?: string, filterExpected?: string, options?: any) {
        return PreconditionApiFp(this.configuration).readAllPreconditions(projectID, testID, assertID, limit, offset, describe, filterProperty, filterOperator, filterExpected, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves assert precondition info. Assert and precondition must be previously created
     * @summary Read assert precondition info
     * @param {number} preconditionID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} assertID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreconditionApi
     */
    public readPrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, describe?: string, options?: any) {
        return PreconditionApiFp(this.configuration).readPrecondition(preconditionID, projectID, testID, assertID, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint updates assert precondition with given properties. Assert and precondition must be previously created
     * @summary Update existing assert precondition
     * @param {number} preconditionID 
     * @param {number} projectID 
     * @param {number} testID 
     * @param {number} assertID 
     * @param {AssertPrecondition} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreconditionApi
     */
    public updatePrecondition(preconditionID: number, projectID: number, testID: number, assertID: number, body?: AssertPrecondition, describe?: string, options?: any) {
        return PreconditionApiFp(this.configuration).updatePrecondition(preconditionID, projectID, testID, assertID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
}
