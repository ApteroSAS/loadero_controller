/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { InlineResponse2004 } from '../models';
import { Test } from '../models';
import { TestIDCopyBody } from '../models';
import { ValidationResponse } from '../models';
/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new test with given data.
         * @summary Create new test
         * @param {string} name 
         * @param {number} startInterval 
         * @param {number} participantTimeout 
         * @param {string} mode 
         * @param {string} incrementStrategy 
         * @param {string} script 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {number} [id] readonly: true
         * @param {Date} [created] readonly: true
         * @param {Date} [updated] readonly: true
         * @param {number} [projectId] readonly: true
         * @param {number} [scriptFileId] readonly: true
         * @param {boolean} [deleted] readonly: true
         * @param {number} [groupCount] readonly: true
         * @param {number} [participantCount] readonly: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest: async (name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createTest.');
            }
            // verify required parameter 'startInterval' is not null or undefined
            if (startInterval === null || startInterval === undefined) {
                throw new RequiredError('startInterval','Required parameter startInterval was null or undefined when calling createTest.');
            }
            // verify required parameter 'participantTimeout' is not null or undefined
            if (participantTimeout === null || participantTimeout === undefined) {
                throw new RequiredError('participantTimeout','Required parameter participantTimeout was null or undefined when calling createTest.');
            }
            // verify required parameter 'mode' is not null or undefined
            if (mode === null || mode === undefined) {
                throw new RequiredError('mode','Required parameter mode was null or undefined when calling createTest.');
            }
            // verify required parameter 'incrementStrategy' is not null or undefined
            if (incrementStrategy === null || incrementStrategy === undefined) {
                throw new RequiredError('incrementStrategy','Required parameter incrementStrategy was null or undefined when calling createTest.');
            }
            // verify required parameter 'script' is not null or undefined
            if (script === null || script === undefined) {
                throw new RequiredError('script','Required parameter script was null or undefined when calling createTest.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling createTest.');
            }
            const localVarPath = `/projects/{projectID}/tests/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (created !== undefined) {
                localVarQueryParameter['created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (updated !== undefined) {
                localVarQueryParameter['updated'] = (updated as any instanceof Date) ?
                    (updated as any).toISOString() :
                    updated;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (scriptFileId !== undefined) {
                localVarQueryParameter['script_file_id'] = scriptFileId;
            }

            if (startInterval !== undefined) {
                localVarQueryParameter['start_interval'] = startInterval;
            }

            if (participantTimeout !== undefined) {
                localVarQueryParameter['participant_timeout'] = participantTimeout;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (incrementStrategy !== undefined) {
                localVarQueryParameter['increment_strategy'] = incrementStrategy;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (groupCount !== undefined) {
                localVarQueryParameter['group_count'] = groupCount;
            }

            if (participantCount !== undefined) {
                localVarQueryParameter['participant_count'] = participantCount;
            }

            if (script !== undefined) {
                localVarQueryParameter['script'] = script;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes test. Project and test must be previously created
         * @summary Delete existing test
         * @param {number} testID 
         * @param {number} projectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTest: async (testID: number, projectID: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling deleteTest.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling deleteTest.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/`
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint duplicates given test. If no copy name is provided an \"Copy of\" prefix will be applied to the test name. Project and test must be previously created.
         * @summary Duplicate existing test
         * @param {number} testID 
         * @param {number} projectID 
         * @param {TestIDCopyBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateTest: async (testID: number, projectID: number, body?: TestIDCopyBody, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling duplicateTest.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling duplicateTest.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/copy/`
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all test info. Project must be previously created
         * @summary Get all existing tests for project
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterName] 
         * @param {string} [filterTestMode] 
         * @param {string} [filterIncrementStrategy] 
         * @param {string} [filterStartIntervalFrom] 
         * @param {string} [filterStartIntervalTo] 
         * @param {string} [filterParticipantTimeoutFrom] 
         * @param {string} [filterParticipantTimeoutTo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllTests: async (projectID: number, limit?: number, offset?: number, describe?: string, filterName?: string, filterTestMode?: string, filterIncrementStrategy?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readAllTests.');
            }
            const localVarPath = `/projects/{projectID}/tests/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter_name'] = filterName;
            }

            if (filterTestMode !== undefined) {
                localVarQueryParameter['filter_test_mode'] = filterTestMode;
            }

            if (filterIncrementStrategy !== undefined) {
                localVarQueryParameter['filter_increment_strategy'] = filterIncrementStrategy;
            }

            if (filterStartIntervalFrom !== undefined) {
                localVarQueryParameter['filter_start_interval_from'] = filterStartIntervalFrom;
            }

            if (filterStartIntervalTo !== undefined) {
                localVarQueryParameter['filter_start_interval_to'] = filterStartIntervalTo;
            }

            if (filterParticipantTimeoutFrom !== undefined) {
                localVarQueryParameter['filter_participant_timeout_from'] = filterParticipantTimeoutFrom;
            }

            if (filterParticipantTimeoutTo !== undefined) {
                localVarQueryParameter['filter_participant_timeout_to'] = filterParticipantTimeoutTo;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves test info. Project and test must be previously created
         * @summary Read test info
         * @param {number} testID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTest: async (testID: number, projectID: number, describe?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling readTest.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readTest.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/`
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates test with given properties. Project and test must be previously created
         * @summary Update existing test
         * @param {string} name 
         * @param {number} startInterval 
         * @param {number} participantTimeout 
         * @param {string} mode 
         * @param {string} incrementStrategy 
         * @param {string} script 
         * @param {number} testID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {number} [id] readonly: true
         * @param {Date} [created] readonly: true
         * @param {Date} [updated] readonly: true
         * @param {number} [projectId] readonly: true
         * @param {number} [scriptFileId] readonly: true
         * @param {boolean} [deleted] readonly: true
         * @param {number} [groupCount] readonly: true
         * @param {number} [participantCount] readonly: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTest: async (name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, testID: number, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateTest.');
            }
            // verify required parameter 'startInterval' is not null or undefined
            if (startInterval === null || startInterval === undefined) {
                throw new RequiredError('startInterval','Required parameter startInterval was null or undefined when calling updateTest.');
            }
            // verify required parameter 'participantTimeout' is not null or undefined
            if (participantTimeout === null || participantTimeout === undefined) {
                throw new RequiredError('participantTimeout','Required parameter participantTimeout was null or undefined when calling updateTest.');
            }
            // verify required parameter 'mode' is not null or undefined
            if (mode === null || mode === undefined) {
                throw new RequiredError('mode','Required parameter mode was null or undefined when calling updateTest.');
            }
            // verify required parameter 'incrementStrategy' is not null or undefined
            if (incrementStrategy === null || incrementStrategy === undefined) {
                throw new RequiredError('incrementStrategy','Required parameter incrementStrategy was null or undefined when calling updateTest.');
            }
            // verify required parameter 'script' is not null or undefined
            if (script === null || script === undefined) {
                throw new RequiredError('script','Required parameter script was null or undefined when calling updateTest.');
            }
            // verify required parameter 'testID' is not null or undefined
            if (testID === null || testID === undefined) {
                throw new RequiredError('testID','Required parameter testID was null or undefined when calling updateTest.');
            }
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling updateTest.');
            }
            const localVarPath = `/projects/{projectID}/tests/{testID}/`
                .replace(`{${"testID"}}`, encodeURIComponent(String(testID)))
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (created !== undefined) {
                localVarQueryParameter['created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (updated !== undefined) {
                localVarQueryParameter['updated'] = (updated as any instanceof Date) ?
                    (updated as any).toISOString() :
                    updated;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (scriptFileId !== undefined) {
                localVarQueryParameter['script_file_id'] = scriptFileId;
            }

            if (startInterval !== undefined) {
                localVarQueryParameter['start_interval'] = startInterval;
            }

            if (participantTimeout !== undefined) {
                localVarQueryParameter['participant_timeout'] = participantTimeout;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (incrementStrategy !== undefined) {
                localVarQueryParameter['increment_strategy'] = incrementStrategy;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (groupCount !== undefined) {
                localVarQueryParameter['group_count'] = groupCount;
            }

            if (participantCount !== undefined) {
                localVarQueryParameter['participant_count'] = participantCount;
            }

            if (script !== undefined) {
                localVarQueryParameter['script'] = script;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint creates new test with given data.
         * @summary Create new test
         * @param {string} name 
         * @param {number} startInterval 
         * @param {number} participantTimeout 
         * @param {string} mode 
         * @param {string} incrementStrategy 
         * @param {string} script 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {number} [id] readonly: true
         * @param {Date} [created] readonly: true
         * @param {Date} [updated] readonly: true
         * @param {number} [projectId] readonly: true
         * @param {number} [scriptFileId] readonly: true
         * @param {boolean} [deleted] readonly: true
         * @param {number} [groupCount] readonly: true
         * @param {number} [participantCount] readonly: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTest(name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Test>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).createTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint deletes test. Project and test must be previously created
         * @summary Delete existing test
         * @param {number} testID 
         * @param {number} projectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTest(testID: number, projectID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).deleteTest(testID, projectID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint duplicates given test. If no copy name is provided an \"Copy of\" prefix will be applied to the test name. Project and test must be previously created.
         * @summary Duplicate existing test
         * @param {number} testID 
         * @param {number} projectID 
         * @param {TestIDCopyBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateTest(testID: number, projectID: number, body?: TestIDCopyBody, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Test>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).duplicateTest(testID, projectID, body, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all test info. Project must be previously created
         * @summary Get all existing tests for project
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterName] 
         * @param {string} [filterTestMode] 
         * @param {string} [filterIncrementStrategy] 
         * @param {string} [filterStartIntervalFrom] 
         * @param {string} [filterStartIntervalTo] 
         * @param {string} [filterParticipantTimeoutFrom] 
         * @param {string} [filterParticipantTimeoutTo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllTests(projectID: number, limit?: number, offset?: number, describe?: string, filterName?: string, filterTestMode?: string, filterIncrementStrategy?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).readAllTests(projectID, limit, offset, describe, filterName, filterTestMode, filterIncrementStrategy, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves test info. Project and test must be previously created
         * @summary Read test info
         * @param {number} testID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readTest(testID: number, projectID: number, describe?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Test>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).readTest(testID, projectID, describe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint updates test with given properties. Project and test must be previously created
         * @summary Update existing test
         * @param {string} name 
         * @param {number} startInterval 
         * @param {number} participantTimeout 
         * @param {string} mode 
         * @param {string} incrementStrategy 
         * @param {string} script 
         * @param {number} testID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {number} [id] readonly: true
         * @param {Date} [created] readonly: true
         * @param {Date} [updated] readonly: true
         * @param {number} [projectId] readonly: true
         * @param {number} [scriptFileId] readonly: true
         * @param {boolean} [deleted] readonly: true
         * @param {number} [groupCount] readonly: true
         * @param {number} [participantCount] readonly: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTest(name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, testID: number, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Test>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).updateTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, testID, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint creates new test with given data.
         * @summary Create new test
         * @param {string} name 
         * @param {number} startInterval 
         * @param {number} participantTimeout 
         * @param {string} mode 
         * @param {string} incrementStrategy 
         * @param {string} script 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {number} [id] readonly: true
         * @param {Date} [created] readonly: true
         * @param {Date} [updated] readonly: true
         * @param {number} [projectId] readonly: true
         * @param {number} [scriptFileId] readonly: true
         * @param {boolean} [deleted] readonly: true
         * @param {number} [groupCount] readonly: true
         * @param {number} [participantCount] readonly: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest(name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options?: any): AxiosPromise<Test> {
            return TestApiFp(configuration).createTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes test. Project and test must be previously created
         * @summary Delete existing test
         * @param {number} testID 
         * @param {number} projectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTest(testID: number, projectID: number, options?: any): AxiosPromise<void> {
            return TestApiFp(configuration).deleteTest(testID, projectID, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint duplicates given test. If no copy name is provided an \"Copy of\" prefix will be applied to the test name. Project and test must be previously created.
         * @summary Duplicate existing test
         * @param {number} testID 
         * @param {number} projectID 
         * @param {TestIDCopyBody} [body] 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateTest(testID: number, projectID: number, body?: TestIDCopyBody, describe?: string, options?: any): AxiosPromise<Test> {
            return TestApiFp(configuration).duplicateTest(testID, projectID, body, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all test info. Project must be previously created
         * @summary Get all existing tests for project
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterName] 
         * @param {string} [filterTestMode] 
         * @param {string} [filterIncrementStrategy] 
         * @param {string} [filterStartIntervalFrom] 
         * @param {string} [filterStartIntervalTo] 
         * @param {string} [filterParticipantTimeoutFrom] 
         * @param {string} [filterParticipantTimeoutTo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllTests(projectID: number, limit?: number, offset?: number, describe?: string, filterName?: string, filterTestMode?: string, filterIncrementStrategy?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return TestApiFp(configuration).readAllTests(projectID, limit, offset, describe, filterName, filterTestMode, filterIncrementStrategy, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves test info. Project and test must be previously created
         * @summary Read test info
         * @param {number} testID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readTest(testID: number, projectID: number, describe?: string, options?: any): AxiosPromise<Test> {
            return TestApiFp(configuration).readTest(testID, projectID, describe, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates test with given properties. Project and test must be previously created
         * @summary Update existing test
         * @param {string} name 
         * @param {number} startInterval 
         * @param {number} participantTimeout 
         * @param {string} mode 
         * @param {string} incrementStrategy 
         * @param {string} script 
         * @param {number} testID 
         * @param {number} projectID 
         * @param {string} [describe] 
         * @param {number} [id] readonly: true
         * @param {Date} [created] readonly: true
         * @param {Date} [updated] readonly: true
         * @param {number} [projectId] readonly: true
         * @param {number} [scriptFileId] readonly: true
         * @param {boolean} [deleted] readonly: true
         * @param {number} [groupCount] readonly: true
         * @param {number} [participantCount] readonly: true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTest(name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, testID: number, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options?: any): AxiosPromise<Test> {
            return TestApiFp(configuration).updateTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, testID, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * This endpoint creates new test with given data.
     * @summary Create new test
     * @param {string} name 
     * @param {number} startInterval 
     * @param {number} participantTimeout 
     * @param {string} mode 
     * @param {string} incrementStrategy 
     * @param {string} script 
     * @param {number} projectID 
     * @param {string} [describe] 
     * @param {number} [id] readonly: true
     * @param {Date} [created] readonly: true
     * @param {Date} [updated] readonly: true
     * @param {number} [projectId] readonly: true
     * @param {number} [scriptFileId] readonly: true
     * @param {boolean} [deleted] readonly: true
     * @param {number} [groupCount] readonly: true
     * @param {number} [participantCount] readonly: true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public createTest(name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options?: any) {
        return TestApiFp(this.configuration).createTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint deletes test. Project and test must be previously created
     * @summary Delete existing test
     * @param {number} testID 
     * @param {number} projectID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public deleteTest(testID: number, projectID: number, options?: any) {
        return TestApiFp(this.configuration).deleteTest(testID, projectID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint duplicates given test. If no copy name is provided an \"Copy of\" prefix will be applied to the test name. Project and test must be previously created.
     * @summary Duplicate existing test
     * @param {number} testID 
     * @param {number} projectID 
     * @param {TestIDCopyBody} [body] 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public duplicateTest(testID: number, projectID: number, body?: TestIDCopyBody, describe?: string, options?: any) {
        return TestApiFp(this.configuration).duplicateTest(testID, projectID, body, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all test info. Project must be previously created
     * @summary Get all existing tests for project
     * @param {number} projectID 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [describe] 
     * @param {string} [filterName] 
     * @param {string} [filterTestMode] 
     * @param {string} [filterIncrementStrategy] 
     * @param {string} [filterStartIntervalFrom] 
     * @param {string} [filterStartIntervalTo] 
     * @param {string} [filterParticipantTimeoutFrom] 
     * @param {string} [filterParticipantTimeoutTo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public readAllTests(projectID: number, limit?: number, offset?: number, describe?: string, filterName?: string, filterTestMode?: string, filterIncrementStrategy?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, options?: any) {
        return TestApiFp(this.configuration).readAllTests(projectID, limit, offset, describe, filterName, filterTestMode, filterIncrementStrategy, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves test info. Project and test must be previously created
     * @summary Read test info
     * @param {number} testID 
     * @param {number} projectID 
     * @param {string} [describe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public readTest(testID: number, projectID: number, describe?: string, options?: any) {
        return TestApiFp(this.configuration).readTest(testID, projectID, describe, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint updates test with given properties. Project and test must be previously created
     * @summary Update existing test
     * @param {string} name 
     * @param {number} startInterval 
     * @param {number} participantTimeout 
     * @param {string} mode 
     * @param {string} incrementStrategy 
     * @param {string} script 
     * @param {number} testID 
     * @param {number} projectID 
     * @param {string} [describe] 
     * @param {number} [id] readonly: true
     * @param {Date} [created] readonly: true
     * @param {Date} [updated] readonly: true
     * @param {number} [projectId] readonly: true
     * @param {number} [scriptFileId] readonly: true
     * @param {boolean} [deleted] readonly: true
     * @param {number} [groupCount] readonly: true
     * @param {number} [participantCount] readonly: true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public updateTest(name: string, startInterval: number, participantTimeout: number, mode: string, incrementStrategy: string, script: string, testID: number, projectID: number, describe?: string, id?: number, created?: Date, updated?: Date, projectId?: number, scriptFileId?: number, deleted?: boolean, groupCount?: number, participantCount?: number, options?: any) {
        return TestApiFp(this.configuration).updateTest(name, startInterval, participantTimeout, mode, incrementStrategy, script, testID, projectID, describe, id, created, updated, projectId, scriptFileId, deleted, groupCount, participantCount, options).then((request) => request(this.axios, this.basePath));
    }
}
