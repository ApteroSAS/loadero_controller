/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ErrorResponse } from '../models';
import { InlineResponse200 } from '../models';
import { RunBody } from '../models';
/**
 * ProjectrunApi - axios parameter creator
 * @export
 */
export const ProjectrunApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all test run info. Project must be previously created
         * @summary Get all existing test runs for project
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterTestName] 
         * @param {string} [filterStartedFrom] 
         * @param {string} [filterStartedTo] 
         * @param {string} [filterFinishedFrom] 
         * @param {string} [filterFinishedTo] 
         * @param {string} [filterExecutionStartedFrom] 
         * @param {string} [filterExecutionStartedTo] 
         * @param {string} [filterExecutionFinishedFrom] 
         * @param {string} [filterExecutionFinishedTo] 
         * @param {string} [filterIncrementStrategy] 
         * @param {string} [filterStatus] 
         * @param {string} [filterTestMode] 
         * @param {string} [filterStartIntervalFrom] 
         * @param {string} [filterStartIntervalTo] 
         * @param {string} [filterParticipantTimeoutFrom] 
         * @param {string} [filterParticipantTimeoutTo] 
         * @param {string} [filterActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllProjectRuns: async (projectID: number, limit?: number, offset?: number, describe?: string, filterTestName?: string, filterStartedFrom?: string, filterStartedTo?: string, filterFinishedFrom?: string, filterFinishedTo?: string, filterExecutionStartedFrom?: string, filterExecutionStartedTo?: string, filterExecutionFinishedFrom?: string, filterExecutionFinishedTo?: string, filterIncrementStrategy?: string, filterStatus?: string, filterTestMode?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, filterActive?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readAllProjectRuns.');
            }
            const localVarPath = `/projects/{projectID}/runs/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (describe !== undefined) {
                localVarQueryParameter['describe'] = describe;
            }

            if (filterTestName !== undefined) {
                localVarQueryParameter['filter_test_name'] = filterTestName;
            }

            if (filterStartedFrom !== undefined) {
                localVarQueryParameter['filter_started_from'] = filterStartedFrom;
            }

            if (filterStartedTo !== undefined) {
                localVarQueryParameter['filter_started_to'] = filterStartedTo;
            }

            if (filterFinishedFrom !== undefined) {
                localVarQueryParameter['filter_finished_from'] = filterFinishedFrom;
            }

            if (filterFinishedTo !== undefined) {
                localVarQueryParameter['filter_finished_to'] = filterFinishedTo;
            }

            if (filterExecutionStartedFrom !== undefined) {
                localVarQueryParameter['filter_execution_started_from'] = filterExecutionStartedFrom;
            }

            if (filterExecutionStartedTo !== undefined) {
                localVarQueryParameter['filter_execution_started_to'] = filterExecutionStartedTo;
            }

            if (filterExecutionFinishedFrom !== undefined) {
                localVarQueryParameter['filter_execution_finished_from'] = filterExecutionFinishedFrom;
            }

            if (filterExecutionFinishedTo !== undefined) {
                localVarQueryParameter['filter_execution_finished_to'] = filterExecutionFinishedTo;
            }

            if (filterIncrementStrategy !== undefined) {
                localVarQueryParameter['filter_increment_strategy'] = filterIncrementStrategy;
            }

            if (filterStatus !== undefined) {
                localVarQueryParameter['filter_status'] = filterStatus;
            }

            if (filterTestMode !== undefined) {
                localVarQueryParameter['filter_test_mode'] = filterTestMode;
            }

            if (filterStartIntervalFrom !== undefined) {
                localVarQueryParameter['filter_start_interval_from'] = filterStartIntervalFrom;
            }

            if (filterStartIntervalTo !== undefined) {
                localVarQueryParameter['filter_start_interval_to'] = filterStartIntervalTo;
            }

            if (filterParticipantTimeoutFrom !== undefined) {
                localVarQueryParameter['filter_participant_timeout_from'] = filterParticipantTimeoutFrom;
            }

            if (filterParticipantTimeoutTo !== undefined) {
                localVarQueryParameter['filter_participant_timeout_to'] = filterParticipantTimeoutTo;
            }

            if (filterActive !== undefined) {
                localVarQueryParameter['filter_active'] = filterActive;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves project test run info. Project and run must be previously created
         * @summary Read project test run info
         * @param {number} projectID 
         * @param {number} runID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProjectRun: async (projectID: number, runID: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectID' is not null or undefined
            if (projectID === null || projectID === undefined) {
                throw new RequiredError('projectID','Required parameter projectID was null or undefined when calling readProjectRun.');
            }
            // verify required parameter 'runID' is not null or undefined
            if (runID === null || runID === undefined) {
                throw new RequiredError('runID','Required parameter runID was null or undefined when calling readProjectRun.');
            }
            const localVarPath = `/projects/{projectID}/runs/{runID}/`
                .replace(`{${"projectID"}}`, encodeURIComponent(String(projectID)))
                .replace(`{${"runID"}}`, encodeURIComponent(String(runID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectrunApi - functional programming interface
 * @export
 */
export const ProjectrunApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all test run info. Project must be previously created
         * @summary Get all existing test runs for project
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterTestName] 
         * @param {string} [filterStartedFrom] 
         * @param {string} [filterStartedTo] 
         * @param {string} [filterFinishedFrom] 
         * @param {string} [filterFinishedTo] 
         * @param {string} [filterExecutionStartedFrom] 
         * @param {string} [filterExecutionStartedTo] 
         * @param {string} [filterExecutionFinishedFrom] 
         * @param {string} [filterExecutionFinishedTo] 
         * @param {string} [filterIncrementStrategy] 
         * @param {string} [filterStatus] 
         * @param {string} [filterTestMode] 
         * @param {string} [filterStartIntervalFrom] 
         * @param {string} [filterStartIntervalTo] 
         * @param {string} [filterParticipantTimeoutFrom] 
         * @param {string} [filterParticipantTimeoutTo] 
         * @param {string} [filterActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllProjectRuns(projectID: number, limit?: number, offset?: number, describe?: string, filterTestName?: string, filterStartedFrom?: string, filterStartedTo?: string, filterFinishedFrom?: string, filterFinishedTo?: string, filterExecutionStartedFrom?: string, filterExecutionStartedTo?: string, filterExecutionFinishedFrom?: string, filterExecutionFinishedTo?: string, filterIncrementStrategy?: string, filterStatus?: string, filterTestMode?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, filterActive?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await ProjectrunApiAxiosParamCreator(configuration).readAllProjectRuns(projectID, limit, offset, describe, filterTestName, filterStartedFrom, filterStartedTo, filterFinishedFrom, filterFinishedTo, filterExecutionStartedFrom, filterExecutionStartedTo, filterExecutionFinishedFrom, filterExecutionFinishedTo, filterIncrementStrategy, filterStatus, filterTestMode, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, filterActive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves project test run info. Project and run must be previously created
         * @summary Read project test run info
         * @param {number} projectID 
         * @param {number} runID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readProjectRun(projectID: number, runID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunBody>> {
            const localVarAxiosArgs = await ProjectrunApiAxiosParamCreator(configuration).readProjectRun(projectID, runID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectrunApi - factory interface
 * @export
 */
export const ProjectrunApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint retrieves all test run info. Project must be previously created
         * @summary Get all existing test runs for project
         * @param {number} projectID 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [describe] 
         * @param {string} [filterTestName] 
         * @param {string} [filterStartedFrom] 
         * @param {string} [filterStartedTo] 
         * @param {string} [filterFinishedFrom] 
         * @param {string} [filterFinishedTo] 
         * @param {string} [filterExecutionStartedFrom] 
         * @param {string} [filterExecutionStartedTo] 
         * @param {string} [filterExecutionFinishedFrom] 
         * @param {string} [filterExecutionFinishedTo] 
         * @param {string} [filterIncrementStrategy] 
         * @param {string} [filterStatus] 
         * @param {string} [filterTestMode] 
         * @param {string} [filterStartIntervalFrom] 
         * @param {string} [filterStartIntervalTo] 
         * @param {string} [filterParticipantTimeoutFrom] 
         * @param {string} [filterParticipantTimeoutTo] 
         * @param {string} [filterActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllProjectRuns(projectID: number, limit?: number, offset?: number, describe?: string, filterTestName?: string, filterStartedFrom?: string, filterStartedTo?: string, filterFinishedFrom?: string, filterFinishedTo?: string, filterExecutionStartedFrom?: string, filterExecutionStartedTo?: string, filterExecutionFinishedFrom?: string, filterExecutionFinishedTo?: string, filterIncrementStrategy?: string, filterStatus?: string, filterTestMode?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, filterActive?: string, options?: any): AxiosPromise<InlineResponse200> {
            return ProjectrunApiFp(configuration).readAllProjectRuns(projectID, limit, offset, describe, filterTestName, filterStartedFrom, filterStartedTo, filterFinishedFrom, filterFinishedTo, filterExecutionStartedFrom, filterExecutionStartedTo, filterExecutionFinishedFrom, filterExecutionFinishedTo, filterIncrementStrategy, filterStatus, filterTestMode, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, filterActive, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves project test run info. Project and run must be previously created
         * @summary Read project test run info
         * @param {number} projectID 
         * @param {number} runID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readProjectRun(projectID: number, runID: number, options?: any): AxiosPromise<RunBody> {
            return ProjectrunApiFp(configuration).readProjectRun(projectID, runID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectrunApi - object-oriented interface
 * @export
 * @class ProjectrunApi
 * @extends {BaseAPI}
 */
export class ProjectrunApi extends BaseAPI {
    /**
     * This endpoint retrieves all test run info. Project must be previously created
     * @summary Get all existing test runs for project
     * @param {number} projectID 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [describe] 
     * @param {string} [filterTestName] 
     * @param {string} [filterStartedFrom] 
     * @param {string} [filterStartedTo] 
     * @param {string} [filterFinishedFrom] 
     * @param {string} [filterFinishedTo] 
     * @param {string} [filterExecutionStartedFrom] 
     * @param {string} [filterExecutionStartedTo] 
     * @param {string} [filterExecutionFinishedFrom] 
     * @param {string} [filterExecutionFinishedTo] 
     * @param {string} [filterIncrementStrategy] 
     * @param {string} [filterStatus] 
     * @param {string} [filterTestMode] 
     * @param {string} [filterStartIntervalFrom] 
     * @param {string} [filterStartIntervalTo] 
     * @param {string} [filterParticipantTimeoutFrom] 
     * @param {string} [filterParticipantTimeoutTo] 
     * @param {string} [filterActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectrunApi
     */
    public readAllProjectRuns(projectID: number, limit?: number, offset?: number, describe?: string, filterTestName?: string, filterStartedFrom?: string, filterStartedTo?: string, filterFinishedFrom?: string, filterFinishedTo?: string, filterExecutionStartedFrom?: string, filterExecutionStartedTo?: string, filterExecutionFinishedFrom?: string, filterExecutionFinishedTo?: string, filterIncrementStrategy?: string, filterStatus?: string, filterTestMode?: string, filterStartIntervalFrom?: string, filterStartIntervalTo?: string, filterParticipantTimeoutFrom?: string, filterParticipantTimeoutTo?: string, filterActive?: string, options?: any) {
        return ProjectrunApiFp(this.configuration).readAllProjectRuns(projectID, limit, offset, describe, filterTestName, filterStartedFrom, filterStartedTo, filterFinishedFrom, filterFinishedTo, filterExecutionStartedFrom, filterExecutionStartedTo, filterExecutionFinishedFrom, filterExecutionFinishedTo, filterIncrementStrategy, filterStatus, filterTestMode, filterStartIntervalFrom, filterStartIntervalTo, filterParticipantTimeoutFrom, filterParticipantTimeoutTo, filterActive, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves project test run info. Project and run must be previously created
     * @summary Read project test run info
     * @param {number} projectID 
     * @param {number} runID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectrunApi
     */
    public readProjectRun(projectID: number, runID: number, options?: any) {
        return ProjectrunApiFp(this.configuration).readProjectRun(projectID, runID, options).then((request) => request(this.axios, this.basePath));
    }
}
