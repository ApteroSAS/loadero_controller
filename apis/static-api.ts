/* tslint:disable */
/* eslint-disable */
/**
 * Loadero Controller
 * This application serves main Loadero's endpoints that can be used to manipulate test data and other services
 *
 * OpenAPI spec version: v0.32.1
 * Contact: support@loadero.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BaseClassificator } from '../models';
import { ErrorResponse } from '../models';
/**
 * StaticApi - axios parameter creator
 * @export
 */
export const StaticApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all static type info
         * @summary Read all static type info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllStaticTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/statics/types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all static resource info
         * @summary Read all static resource info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllStatics: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/statics/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all available metric paths
         * @summary Read all metric path info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMetricPath: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/statics/metric_path/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all specified static resource info
         * @summary Read all specified static resource info
         * @param {string} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStaticResource: async (resource: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resource' is not null or undefined
            if (resource === null || resource === undefined) {
                throw new RequiredError('resource','Required parameter resource was null or undefined when calling readStaticResource.');
            }
            const localVarPath = `/statics/{resource}/`
                .replace(`{${"resource"}}`, encodeURIComponent(String(resource)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("LoaderoAuth")
                    : await configuration.apiKey;
                localVarHeaderParameter["LoaderoAuth"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaticApi - functional programming interface
 * @export
 */
export const StaticApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all static type info
         * @summary Read all static type info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllStaticTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await StaticApiAxiosParamCreator(configuration).readAllStaticTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all static resource info
         * @summary Read all static resource info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllStatics(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key, string]: Array<BaseClassificator>;}>> {
            const localVarAxiosArgs = await StaticApiAxiosParamCreator(configuration).readAllStatics(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all available metric paths
         * @summary Read all metric path info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMetricPath(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await StaticApiAxiosParamCreator(configuration).readMetricPath(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all specified static resource info
         * @summary Read all specified static resource info
         * @param {string} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStaticResource(resource: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaseClassificator>>> {
            const localVarAxiosArgs = await StaticApiAxiosParamCreator(configuration).readStaticResource(resource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StaticApi - factory interface
 * @export
 */
export const StaticApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint retrieves all static type info
         * @summary Read all static type info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllStaticTypes(options?: any): AxiosPromise<Array<string>> {
            return StaticApiFp(configuration).readAllStaticTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all static resource info
         * @summary Read all static resource info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllStatics(options?: any): AxiosPromise<{ [key, string]: Array<BaseClassificator>;}> {
            return StaticApiFp(configuration).readAllStatics(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all available metric paths
         * @summary Read all metric path info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMetricPath(options?: any): AxiosPromise<Array<string>> {
            return StaticApiFp(configuration).readMetricPath(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all specified static resource info
         * @summary Read all specified static resource info
         * @param {string} resource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStaticResource(resource: string, options?: any): AxiosPromise<Array<BaseClassificator>> {
            return StaticApiFp(configuration).readStaticResource(resource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaticApi - object-oriented interface
 * @export
 * @class StaticApi
 * @extends {BaseAPI}
 */
export class StaticApi extends BaseAPI {
    /**
     * This endpoint retrieves all static type info
     * @summary Read all static type info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticApi
     */
    public readAllStaticTypes(options?: any) {
        return StaticApiFp(this.configuration).readAllStaticTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all static resource info
     * @summary Read all static resource info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticApi
     */
    public readAllStatics(options?: any) {
        return StaticApiFp(this.configuration).readAllStatics(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all available metric paths
     * @summary Read all metric path info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticApi
     */
    public readMetricPath(options?: any) {
        return StaticApiFp(this.configuration).readMetricPath(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint retrieves all specified static resource info
     * @summary Read all specified static resource info
     * @param {string} resource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticApi
     */
    public readStaticResource(resource: string, options?: any) {
        return StaticApiFp(this.configuration).readStaticResource(resource, options).then((request) => request(this.axios, this.basePath));
    }
}
